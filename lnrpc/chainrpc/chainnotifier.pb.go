// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: chainrpc/chainnotifier.proto

package chainrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction hash for which we should request a confirmation notification
	// for. If set to a hash of all zeros, then the confirmation notification will
	// be requested for the script instead.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// An output script within a transaction with the hash above which will be used
	// by light clients to match block filters. If the transaction hash is set to a
	// hash of all zeros, then a confirmation notification will be requested for
	// this script instead.
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// The number of desired confirmations the transaction/output script should
	// reach before dispatching a confirmation notification.
	NumConfs uint32 `protobuf:"varint,3,opt,name=num_confs,json=numConfs,proto3" json:"num_confs,omitempty"`
	// The earliest height in the chain for which the transaction/output script
	// could have been included in a block. This should in most cases be set to the
	// broadcast height of the transaction/output script.
	HeightHint uint32 `protobuf:"varint,4,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	// If true, then the block that mines the specified txid/script will be
	// included in eventual the notification event.
	IncludeBlock  bool `protobuf:"varint,5,opt,name=include_block,json=includeBlock,proto3" json:"include_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfRequest) Reset() {
	*x = ConfRequest{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfRequest) ProtoMessage() {}

func (x *ConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfRequest.ProtoReflect.Descriptor instead.
func (*ConfRequest) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{0}
}

func (x *ConfRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *ConfRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *ConfRequest) GetNumConfs() uint32 {
	if x != nil {
		return x.NumConfs
	}
	return 0
}

func (x *ConfRequest) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *ConfRequest) GetIncludeBlock() bool {
	if x != nil {
		return x.IncludeBlock
	}
	return false
}

type ConfDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw bytes of the confirmed transaction.
	RawTx []byte `protobuf:"bytes,1,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	// The hash of the block in which the confirmed transaction was included in.
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// The height of the block in which the confirmed transaction was included
	// in.
	BlockHeight uint32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The index of the confirmed transaction within the block.
	TxIndex uint32 `protobuf:"varint,4,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// The raw bytes of the block that mined the transaction. Only included if
	// include_block was set in the request.
	RawBlock      []byte `protobuf:"bytes,5,opt,name=raw_block,json=rawBlock,proto3" json:"raw_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfDetails) Reset() {
	*x = ConfDetails{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfDetails) ProtoMessage() {}

func (x *ConfDetails) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfDetails.ProtoReflect.Descriptor instead.
func (*ConfDetails) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{1}
}

func (x *ConfDetails) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *ConfDetails) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ConfDetails) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ConfDetails) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *ConfDetails) GetRawBlock() []byte {
	if x != nil {
		return x.RawBlock
	}
	return nil
}

type Reorg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reorg) Reset() {
	*x = Reorg{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reorg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reorg) ProtoMessage() {}

func (x *Reorg) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reorg.ProtoReflect.Descriptor instead.
func (*Reorg) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{2}
}

type ConfEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ConfEvent_Conf
	//	*ConfEvent_Reorg
	Event         isConfEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfEvent) Reset() {
	*x = ConfEvent{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfEvent) ProtoMessage() {}

func (x *ConfEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfEvent.ProtoReflect.Descriptor instead.
func (*ConfEvent) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{3}
}

func (x *ConfEvent) GetEvent() isConfEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ConfEvent) GetConf() *ConfDetails {
	if x != nil {
		if x, ok := x.Event.(*ConfEvent_Conf); ok {
			return x.Conf
		}
	}
	return nil
}

func (x *ConfEvent) GetReorg() *Reorg {
	if x != nil {
		if x, ok := x.Event.(*ConfEvent_Reorg); ok {
			return x.Reorg
		}
	}
	return nil
}

type isConfEvent_Event interface {
	isConfEvent_Event()
}

type ConfEvent_Conf struct {
	// An event that includes the confirmation details of the request
	// (txid/ouput script).
	Conf *ConfDetails `protobuf:"bytes,1,opt,name=conf,proto3,oneof"`
}

type ConfEvent_Reorg struct {
	// An event send when the transaction of the request is reorged out of the
	// chain.
	Reorg *Reorg `protobuf:"bytes,2,opt,name=reorg,proto3,oneof"`
}

func (*ConfEvent_Conf) isConfEvent_Event() {}

func (*ConfEvent_Reorg) isConfEvent_Event() {}

type Outpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the transaction.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of the output within the transaction.
	Index         uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Outpoint) Reset() {
	*x = Outpoint{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outpoint) ProtoMessage() {}

func (x *Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outpoint.ProtoReflect.Descriptor instead.
func (*Outpoint) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{4}
}

func (x *Outpoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Outpoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SpendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The outpoint for which we should request a spend notification for. If set to
	// a zero outpoint, then the spend notification will be requested for the
	// script instead. A zero or nil outpoint is not supported for Taproot spends
	// because the output script cannot reliably be computed from the witness alone
	// and the spent output script is not always available in the rescan context.
	// So an outpoint must _always_ be specified when registering a spend
	// notification for a Taproot output.
	Outpoint *Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The output script for the outpoint above. This will be used by light clients
	// to match block filters. If the outpoint is set to a zero outpoint, then a
	// spend notification will be requested for this script instead.
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// The earliest height in the chain for which the outpoint/output script could
	// have been spent. This should in most cases be set to the broadcast height of
	// the outpoint/output script.
	HeightHint    uint32 `protobuf:"varint,3,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpendRequest) Reset() {
	*x = SpendRequest{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendRequest) ProtoMessage() {}

func (x *SpendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendRequest.ProtoReflect.Descriptor instead.
func (*SpendRequest) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{5}
}

func (x *SpendRequest) GetOutpoint() *Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *SpendRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *SpendRequest) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

type SpendDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The outpoint was that spent.
	SpendingOutpoint *Outpoint `protobuf:"bytes,1,opt,name=spending_outpoint,json=spendingOutpoint,proto3" json:"spending_outpoint,omitempty"`
	// The raw bytes of the spending transaction.
	RawSpendingTx []byte `protobuf:"bytes,2,opt,name=raw_spending_tx,json=rawSpendingTx,proto3" json:"raw_spending_tx,omitempty"`
	// The hash of the spending transaction.
	SpendingTxHash []byte `protobuf:"bytes,3,opt,name=spending_tx_hash,json=spendingTxHash,proto3" json:"spending_tx_hash,omitempty"`
	// The input of the spending transaction that fulfilled the spend request.
	SpendingInputIndex uint32 `protobuf:"varint,4,opt,name=spending_input_index,json=spendingInputIndex,proto3" json:"spending_input_index,omitempty"`
	// The height at which the spending transaction was included in a block.
	SpendingHeight uint32 `protobuf:"varint,5,opt,name=spending_height,json=spendingHeight,proto3" json:"spending_height,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpendDetails) Reset() {
	*x = SpendDetails{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpendDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendDetails) ProtoMessage() {}

func (x *SpendDetails) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendDetails.ProtoReflect.Descriptor instead.
func (*SpendDetails) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{6}
}

func (x *SpendDetails) GetSpendingOutpoint() *Outpoint {
	if x != nil {
		return x.SpendingOutpoint
	}
	return nil
}

func (x *SpendDetails) GetRawSpendingTx() []byte {
	if x != nil {
		return x.RawSpendingTx
	}
	return nil
}

func (x *SpendDetails) GetSpendingTxHash() []byte {
	if x != nil {
		return x.SpendingTxHash
	}
	return nil
}

func (x *SpendDetails) GetSpendingInputIndex() uint32 {
	if x != nil {
		return x.SpendingInputIndex
	}
	return 0
}

func (x *SpendDetails) GetSpendingHeight() uint32 {
	if x != nil {
		return x.SpendingHeight
	}
	return 0
}

type SpendEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*SpendEvent_Spend
	//	*SpendEvent_Reorg
	Event         isSpendEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpendEvent) Reset() {
	*x = SpendEvent{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpendEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendEvent) ProtoMessage() {}

func (x *SpendEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendEvent.ProtoReflect.Descriptor instead.
func (*SpendEvent) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{7}
}

func (x *SpendEvent) GetEvent() isSpendEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SpendEvent) GetSpend() *SpendDetails {
	if x != nil {
		if x, ok := x.Event.(*SpendEvent_Spend); ok {
			return x.Spend
		}
	}
	return nil
}

func (x *SpendEvent) GetReorg() *Reorg {
	if x != nil {
		if x, ok := x.Event.(*SpendEvent_Reorg); ok {
			return x.Reorg
		}
	}
	return nil
}

type isSpendEvent_Event interface {
	isSpendEvent_Event()
}

type SpendEvent_Spend struct {
	// An event that includes the details of the spending transaction of the
	// request (outpoint/output script).
	Spend *SpendDetails `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type SpendEvent_Reorg struct {
	// An event sent when the spending transaction of the request was
	// reorged out of the chain.
	Reorg *Reorg `protobuf:"bytes,2,opt,name=reorg,proto3,oneof"`
}

func (*SpendEvent_Spend) isSpendEvent_Event() {}

func (*SpendEvent_Reorg) isSpendEvent_Event() {}

type BlockEpoch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the block.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The height of the block.
	Height        uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockEpoch) Reset() {
	*x = BlockEpoch{}
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEpoch) ProtoMessage() {}

func (x *BlockEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_chainrpc_chainnotifier_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEpoch.ProtoReflect.Descriptor instead.
func (*BlockEpoch) Descriptor() ([]byte, []int) {
	return file_chainrpc_chainnotifier_proto_rawDescGZIP(), []int{8}
}

func (x *BlockEpoch) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockEpoch) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_chainrpc_chainnotifier_proto protoreflect.FileDescriptor

const file_chainrpc_chainnotifier_proto_rawDesc = "" +
	"\n" +
	"\x1cchainrpc/chainnotifier.proto\x12\bchainrpc\"\x9c\x01\n" +
	"\vConfRequest\x12\x12\n" +
	"\x04txid\x18\x01 \x01(\fR\x04txid\x12\x16\n" +
	"\x06script\x18\x02 \x01(\fR\x06script\x12\x1b\n" +
	"\tnum_confs\x18\x03 \x01(\rR\bnumConfs\x12\x1f\n" +
	"\vheight_hint\x18\x04 \x01(\rR\n" +
	"heightHint\x12#\n" +
	"\rinclude_block\x18\x05 \x01(\bR\fincludeBlock\"\x9e\x01\n" +
	"\vConfDetails\x12\x15\n" +
	"\x06raw_tx\x18\x01 \x01(\fR\x05rawTx\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\fR\tblockHash\x12!\n" +
	"\fblock_height\x18\x03 \x01(\rR\vblockHeight\x12\x19\n" +
	"\btx_index\x18\x04 \x01(\rR\atxIndex\x12\x1b\n" +
	"\traw_block\x18\x05 \x01(\fR\brawBlock\"\a\n" +
	"\x05Reorg\"j\n" +
	"\tConfEvent\x12+\n" +
	"\x04conf\x18\x01 \x01(\v2\x15.chainrpc.ConfDetailsH\x00R\x04conf\x12'\n" +
	"\x05reorg\x18\x02 \x01(\v2\x0f.chainrpc.ReorgH\x00R\x05reorgB\a\n" +
	"\x05event\"4\n" +
	"\bOutpoint\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\"w\n" +
	"\fSpendRequest\x12.\n" +
	"\boutpoint\x18\x01 \x01(\v2\x12.chainrpc.OutpointR\boutpoint\x12\x16\n" +
	"\x06script\x18\x02 \x01(\fR\x06script\x12\x1f\n" +
	"\vheight_hint\x18\x03 \x01(\rR\n" +
	"heightHint\"\xfc\x01\n" +
	"\fSpendDetails\x12?\n" +
	"\x11spending_outpoint\x18\x01 \x01(\v2\x12.chainrpc.OutpointR\x10spendingOutpoint\x12&\n" +
	"\x0fraw_spending_tx\x18\x02 \x01(\fR\rrawSpendingTx\x12(\n" +
	"\x10spending_tx_hash\x18\x03 \x01(\fR\x0espendingTxHash\x120\n" +
	"\x14spending_input_index\x18\x04 \x01(\rR\x12spendingInputIndex\x12'\n" +
	"\x0fspending_height\x18\x05 \x01(\rR\x0espendingHeight\"n\n" +
	"\n" +
	"SpendEvent\x12.\n" +
	"\x05spend\x18\x01 \x01(\v2\x16.chainrpc.SpendDetailsH\x00R\x05spend\x12'\n" +
	"\x05reorg\x18\x02 \x01(\v2\x0f.chainrpc.ReorgH\x00R\x05reorgB\a\n" +
	"\x05event\"8\n" +
	"\n" +
	"BlockEpoch\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x16\n" +
	"\x06height\x18\x02 \x01(\rR\x06height2\xe7\x01\n" +
	"\rChainNotifier\x12I\n" +
	"\x19RegisterConfirmationsNtfn\x12\x15.chainrpc.ConfRequest\x1a\x13.chainrpc.ConfEvent0\x01\x12C\n" +
	"\x11RegisterSpendNtfn\x12\x16.chainrpc.SpendRequest\x1a\x14.chainrpc.SpendEvent0\x01\x12F\n" +
	"\x16RegisterBlockEpochNtfn\x12\x14.chainrpc.BlockEpoch\x1a\x14.chainrpc.BlockEpoch0\x01B0Z.github.com/lightningnetwork/lnd/lnrpc/chainrpcb\x06proto3"

var (
	file_chainrpc_chainnotifier_proto_rawDescOnce sync.Once
	file_chainrpc_chainnotifier_proto_rawDescData []byte
)

func file_chainrpc_chainnotifier_proto_rawDescGZIP() []byte {
	file_chainrpc_chainnotifier_proto_rawDescOnce.Do(func() {
		file_chainrpc_chainnotifier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chainrpc_chainnotifier_proto_rawDesc), len(file_chainrpc_chainnotifier_proto_rawDesc)))
	})
	return file_chainrpc_chainnotifier_proto_rawDescData
}

var file_chainrpc_chainnotifier_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chainrpc_chainnotifier_proto_goTypes = []any{
	(*ConfRequest)(nil),  // 0: chainrpc.ConfRequest
	(*ConfDetails)(nil),  // 1: chainrpc.ConfDetails
	(*Reorg)(nil),        // 2: chainrpc.Reorg
	(*ConfEvent)(nil),    // 3: chainrpc.ConfEvent
	(*Outpoint)(nil),     // 4: chainrpc.Outpoint
	(*SpendRequest)(nil), // 5: chainrpc.SpendRequest
	(*SpendDetails)(nil), // 6: chainrpc.SpendDetails
	(*SpendEvent)(nil),   // 7: chainrpc.SpendEvent
	(*BlockEpoch)(nil),   // 8: chainrpc.BlockEpoch
}
var file_chainrpc_chainnotifier_proto_depIdxs = []int32{
	1, // 0: chainrpc.ConfEvent.conf:type_name -> chainrpc.ConfDetails
	2, // 1: chainrpc.ConfEvent.reorg:type_name -> chainrpc.Reorg
	4, // 2: chainrpc.SpendRequest.outpoint:type_name -> chainrpc.Outpoint
	4, // 3: chainrpc.SpendDetails.spending_outpoint:type_name -> chainrpc.Outpoint
	6, // 4: chainrpc.SpendEvent.spend:type_name -> chainrpc.SpendDetails
	2, // 5: chainrpc.SpendEvent.reorg:type_name -> chainrpc.Reorg
	0, // 6: chainrpc.ChainNotifier.RegisterConfirmationsNtfn:input_type -> chainrpc.ConfRequest
	5, // 7: chainrpc.ChainNotifier.RegisterSpendNtfn:input_type -> chainrpc.SpendRequest
	8, // 8: chainrpc.ChainNotifier.RegisterBlockEpochNtfn:input_type -> chainrpc.BlockEpoch
	3, // 9: chainrpc.ChainNotifier.RegisterConfirmationsNtfn:output_type -> chainrpc.ConfEvent
	7, // 10: chainrpc.ChainNotifier.RegisterSpendNtfn:output_type -> chainrpc.SpendEvent
	8, // 11: chainrpc.ChainNotifier.RegisterBlockEpochNtfn:output_type -> chainrpc.BlockEpoch
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_chainrpc_chainnotifier_proto_init() }
func file_chainrpc_chainnotifier_proto_init() {
	if File_chainrpc_chainnotifier_proto != nil {
		return
	}
	file_chainrpc_chainnotifier_proto_msgTypes[3].OneofWrappers = []any{
		(*ConfEvent_Conf)(nil),
		(*ConfEvent_Reorg)(nil),
	}
	file_chainrpc_chainnotifier_proto_msgTypes[7].OneofWrappers = []any{
		(*SpendEvent_Spend)(nil),
		(*SpendEvent_Reorg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chainrpc_chainnotifier_proto_rawDesc), len(file_chainrpc_chainnotifier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chainrpc_chainnotifier_proto_goTypes,
		DependencyIndexes: file_chainrpc_chainnotifier_proto_depIdxs,
		MessageInfos:      file_chainrpc_chainnotifier_proto_msgTypes,
	}.Build()
	File_chainrpc_chainnotifier_proto = out.File
	file_chainrpc_chainnotifier_proto_goTypes = nil
	file_chainrpc_chainnotifier_proto_depIdxs = nil
}
