// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package graphrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphClient is the client API for Graph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphClient interface {
	// BootstrapperName returns the name of the bootstrapper implementation being
	// used by the service.
	BootstrapperName(ctx context.Context, in *BoostrapperNameReq, opts ...grpc.CallOption) (*BoostrapperNameResp, error)
	// BootstrapAddrs uniformly samples a set of specified address from backing
	// bootstrapper source. NumAddrs can be used to denote how many valid peer
	// addresses to return. IgnoreNodes can be used to specify a set of nodes to
	// exclude from the result list.
	BootstrapAddrs(ctx context.Context, in *BootstrapAddrsReq, opts ...grpc.CallOption) (*BootstrapAddrsResp, error)
	// BetweennessCentrality computes the normalised and non-normalised betweenness
	// centrality for each node in the graph.
	BetweennessCentrality(ctx context.Context, in *BetweennessCentralityReq, opts ...grpc.CallOption) (*BetweennessCentralityResp, error)
}

type graphClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphClient(cc grpc.ClientConnInterface) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) BootstrapperName(ctx context.Context, in *BoostrapperNameReq, opts ...grpc.CallOption) (*BoostrapperNameResp, error) {
	out := new(BoostrapperNameResp)
	err := c.cc.Invoke(ctx, "/graphrpc.Graph/BootstrapperName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) BootstrapAddrs(ctx context.Context, in *BootstrapAddrsReq, opts ...grpc.CallOption) (*BootstrapAddrsResp, error) {
	out := new(BootstrapAddrsResp)
	err := c.cc.Invoke(ctx, "/graphrpc.Graph/BootstrapAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) BetweennessCentrality(ctx context.Context, in *BetweennessCentralityReq, opts ...grpc.CallOption) (*BetweennessCentralityResp, error) {
	out := new(BetweennessCentralityResp)
	err := c.cc.Invoke(ctx, "/graphrpc.Graph/BetweennessCentrality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServer is the server API for Graph service.
// All implementations must embed UnimplementedGraphServer
// for forward compatibility
type GraphServer interface {
	// BootstrapperName returns the name of the bootstrapper implementation being
	// used by the service.
	BootstrapperName(context.Context, *BoostrapperNameReq) (*BoostrapperNameResp, error)
	// BootstrapAddrs uniformly samples a set of specified address from backing
	// bootstrapper source. NumAddrs can be used to denote how many valid peer
	// addresses to return. IgnoreNodes can be used to specify a set of nodes to
	// exclude from the result list.
	BootstrapAddrs(context.Context, *BootstrapAddrsReq) (*BootstrapAddrsResp, error)
	// BetweennessCentrality computes the normalised and non-normalised betweenness
	// centrality for each node in the graph.
	BetweennessCentrality(context.Context, *BetweennessCentralityReq) (*BetweennessCentralityResp, error)
	mustEmbedUnimplementedGraphServer()
}

// UnimplementedGraphServer must be embedded to have forward compatible implementations.
type UnimplementedGraphServer struct {
}

func (UnimplementedGraphServer) BootstrapperName(context.Context, *BoostrapperNameReq) (*BoostrapperNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapperName not implemented")
}
func (UnimplementedGraphServer) BootstrapAddrs(context.Context, *BootstrapAddrsReq) (*BootstrapAddrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapAddrs not implemented")
}
func (UnimplementedGraphServer) BetweennessCentrality(context.Context, *BetweennessCentralityReq) (*BetweennessCentralityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetweennessCentrality not implemented")
}
func (UnimplementedGraphServer) mustEmbedUnimplementedGraphServer() {}

// UnsafeGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServer will
// result in compilation errors.
type UnsafeGraphServer interface {
	mustEmbedUnimplementedGraphServer()
}

func RegisterGraphServer(s grpc.ServiceRegistrar, srv GraphServer) {
	s.RegisterService(&Graph_ServiceDesc, srv)
}

func _Graph_BootstrapperName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoostrapperNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).BootstrapperName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphrpc.Graph/BootstrapperName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).BootstrapperName(ctx, req.(*BoostrapperNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_BootstrapAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapAddrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).BootstrapAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphrpc.Graph/BootstrapAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).BootstrapAddrs(ctx, req.(*BootstrapAddrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_BetweennessCentrality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetweennessCentralityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).BetweennessCentrality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphrpc.Graph/BetweennessCentrality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).BetweennessCentrality(ctx, req.(*BetweennessCentralityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Graph_ServiceDesc is the grpc.ServiceDesc for Graph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Graph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphrpc.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BootstrapperName",
			Handler:    _Graph_BootstrapperName_Handler,
		},
		{
			MethodName: "BootstrapAddrs",
			Handler:    _Graph_BootstrapAddrs_Handler,
		},
		{
			MethodName: "BetweennessCentrality",
			Handler:    _Graph_BetweennessCentrality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graphrpc/graph.proto",
}
