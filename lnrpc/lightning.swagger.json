{
  "swagger": "2.0",
  "info": {
    "title": "lightning.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Lightning"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/balance/blockchain": {
      "get": {
        "summary": "lncli: `walletbalance`\nWalletBalance returns total unspent outputs(confirmed and unconfirmed), all\nconfirmed unspent outputs and all unconfirmed unspent outputs under control\nof the wallet.",
        "operationId": "Lightning_WalletBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcWalletBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/balance/channels": {
      "get": {
        "summary": "lncli: `channelbalance`\nChannelBalance returns a report on the total funds across all open channels,\ncategorized in local/remote, pending local/remote and unsettled local/remote\nbalances.",
        "operationId": "Lightning_ChannelBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels": {
      "get": {
        "summary": "lncli: `listchannels`\nListChannels returns a description of all the open channels that this node\nis a participant in.",
        "operationId": "Lightning_ListChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inactive_only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "public_only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "private_only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "peer",
            "description": "Filters the response for channels with a target peer's pubkey. If peer is\nempty, all channels will be returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "OpenChannelSync is a synchronous version of the OpenChannel RPC call. This\ncall is meant to be consumed by clients to the REST proxy. As with all\nother sync calls, all byte slices are intended to be populated as hex\nencoded strings.",
        "operationId": "Lightning_OpenChannelSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelPoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcOpenChannelRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/abandon/{channel_point.funding_txid_str}/{channel_point.output_index}": {
      "delete": {
        "summary": "lncli: `abandonchannel`\nAbandonChannel removes all channel state from the database except for a\nclose summary. This method can be used to get rid of permanently unusable\nchannels due to bugs fixed in newer versions of lnd. This method can also be\nused to remove externally funded channels where the funding transaction was\nnever broadcast. Only available for non-externally funded channels in dev\nbuild.",
        "operationId": "Lightning_AbandonChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcAbandonChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "channel_point.funding_txid_str",
            "description": "Hex-encoded string representing the byte-reversed hash of the funding\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "channel_point.output_index",
            "description": "The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "channel_point.funding_txid_bytes",
            "description": "Txid of the funding transaction. When using REST, this field must be\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pending_funding_shim_only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "i_know_what_i_am_doing",
            "description": "Override the requirement for being in dev mode by setting this to true and\nconfirming the user knows what they are doing and this is a potential foot\ngun to lose funds if used on active channels.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/acceptor": {
      "post": {
        "summary": "ChannelAcceptor dispatches a bi-directional streaming RPC in which\nOpenChannel requests are sent to the client and the client responds with\na boolean that tells LND whether or not to accept the channel. This allows\nnode operators to specify their own criteria for accepting inbound channels\nthrough a single persistent connection.",
        "operationId": "Lightning_ChannelAcceptor",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcChannelAcceptRequest"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcChannelAcceptRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcChannelAcceptResponse"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup": {
      "get": {
        "summary": "ExportAllChannelBackups returns static channel backups for all existing\nchannels known to lnd. A set of regular singular static channel backups for\neach channel are returned. Additionally, a multi-channel backup is returned\nas well, which contains a single encrypted blob containing the backups of\neach channel.",
        "operationId": "Lightning_ExportAllChannelBackups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChanBackupSnapshot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/restore": {
      "post": {
        "summary": "lncli: `restorechanbackup`\nRestoreChannelBackups accepts a set of singular channel backups, or a\nsingle encrypted multi-chan backup and attempts to recover any funds\nremaining within the channel. If we are able to unpack the backup, then the\nnew channel will be shown under listchannels, as well as pending channels.",
        "operationId": "Lightning_RestoreChannelBackups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcRestoreBackupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcRestoreChanBackupRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/subscribe": {
      "get": {
        "summary": "SubscribeChannelBackups allows a client to sub-subscribe to the most up to\ndate information concerning the state of all channel backups. Each time a\nnew channel is added, we return the new set of channels, along with a\nmulti-chan backup containing the backup info for all channels. Each time a\nchannel is closed, we send a new update, which contains new new chan back\nups, but the updated set of encrypted multi-chan backups with the closed\nchannel(s) removed.",
        "operationId": "Lightning_SubscribeChannelBackups",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcChanBackupSnapshot"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcChanBackupSnapshot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/verify": {
      "post": {
        "summary": "VerifyChanBackup allows a caller to verify the integrity of a channel backup\nsnapshot. This method will accept either a packed Single or a packed Multi.\nSpecifying both will result in an error.",
        "operationId": "Lightning_VerifyChanBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyChanBackupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcChanBackupSnapshot"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/{chan_point.funding_txid_str}/{chan_point.output_index}": {
      "get": {
        "summary": "lncli: `exportchanbackup`\nExportChannelBackup attempts to return an encrypted static channel backup\nfor the target channel identified by it channel point. The backup is\nencrypted with a key generated from the aezeed seed of the user. The\nreturned backup can either be restored using the RestoreChannelBackup\nmethod once lnd is running, or via the InitWallet and UnlockWallet methods\nfrom the WalletUnlocker service.",
        "operationId": "Lightning_ExportChannelBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelBackup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "chan_point.funding_txid_str",
            "description": "Hex-encoded string representing the byte-reversed hash of the funding\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chan_point.output_index",
            "description": "The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "chan_point.funding_txid_bytes",
            "description": "Txid of the funding transaction. When using REST, this field must be\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/batch": {
      "post": {
        "summary": "lncli: `batchopenchannel`\nBatchOpenChannel attempts to open multiple single-funded channels in a\nsingle transaction in an atomic way. This means either all channel open\nrequests succeed at once or all attempts are aborted if any of them fail.\nThis is the safer variant of using PSBTs to manually fund a batch of\nchannels through the OpenChannel RPC.",
        "operationId": "Lightning_BatchOpenChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcBatchOpenChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcBatchOpenChannelRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/closed": {
      "get": {
        "summary": "lncli: `closedchannels`\nClosedChannels returns a description of all the closed channels that\nthis node was a participant in.",
        "operationId": "Lightning_ClosedChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcClosedChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cooperative",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "local_force",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "remote_force",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "breach",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "funding_canceled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "abandoned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/pending": {
      "get": {
        "summary": "lncli: `pendingchannels`\nPendingChannels returns a list of all the channels that are currently\nconsidered \"pending\". A channel is pending if it has finished the funding\nworkflow and is waiting for confirmations for the funding txn, or is in the\nprocess of closure, either initiated cooperatively or non-cooperatively.",
        "operationId": "Lightning_PendingChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPendingChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/stream": {
      "post": {
        "summary": "lncli: `openchannel`\nOpenChannel attempts to open a singly funded channel specified in the\nrequest to a remote peer. Users are able to specify a target number of\nblocks that the funding transaction should be confirmed in, or a manual fee\nrate to us for the funding transaction. If neither are specified, then a\nlax block confirmation target is used. Each OpenStatusUpdate will return\nthe pending channel ID of the in-progress channel. Depending on the\narguments specified in the OpenChannelRequest, this pending channel ID can\nthen be used to manually progress the channel funding flow.",
        "operationId": "Lightning_OpenChannel",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcOpenStatusUpdate"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcOpenStatusUpdate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcOpenChannelRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/subscribe": {
      "get": {
        "summary": "SubscribeChannelEvents creates a uni-directional stream from the server to\nthe client in which any updates relevant to the state of the channels are\nsent over. Events include new active channels, inactive channels, and closed\nchannels.",
        "operationId": "Lightning_SubscribeChannelEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcChannelEventUpdate"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcChannelEventUpdate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/transaction-stream": {
      "post": {
        "summary": "lncli: `sendpayment`\nDeprecated, use routerrpc.SendPaymentV2. SendPayment dispatches a\nbi-directional streaming RPC for sending payments through the Lightning\nNetwork. A single RPC invocation creates a persistent bi-directional\nstream allowing clients to rapidly send payments through the Lightning\nNetwork with a single persistent connection.",
        "operationId": "Lightning_SendPayment",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcSendResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcSendResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/transactions": {
      "post": {
        "summary": "SendPaymentSync is the synchronous non-streaming version of SendPayment.\nThis RPC is intended to be consumed by clients of the REST proxy.\nAdditionally, this RPC expects the destination's public key and the payment\nhash (if any) to be encoded as hex strings.",
        "operationId": "Lightning_SendPaymentSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/transactions/route": {
      "post": {
        "summary": "SendToRouteSync is a synchronous version of SendToRoute. It Will block\nuntil the payment either fails or succeeds.",
        "operationId": "Lightning_SendToRouteSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendToRouteRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/{channel_point.funding_txid_str}/{channel_point.output_index}": {
      "delete": {
        "summary": "lncli: `closechannel`\nCloseChannel attempts to close an active channel identified by its channel\noutpoint (ChannelPoint). The actions of this method can additionally be\naugmented to attempt a force close after a timeout period in the case of an\ninactive peer. If a non-force close (cooperative closure) is requested,\nthen the user can specify either a target number of blocks until the\nclosure transaction is confirmed, or a manual fee rate. If neither are\nspecified, then a default lax, block confirmation target is used.",
        "operationId": "Lightning_CloseChannel",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcCloseStatusUpdate"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcCloseStatusUpdate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "channel_point.funding_txid_str",
            "description": "Hex-encoded string representing the byte-reversed hash of the funding\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "channel_point.output_index",
            "description": "The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "channel_point.funding_txid_bytes",
            "description": "Txid of the funding transaction. When using REST, this field must be\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "force",
            "description": "If true, then the channel will be closed forcibly. This means the\ncurrent commitment transaction will be signed and broadcast.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "target_conf",
            "description": "The target number of blocks that the closure transaction should be\nconfirmed by.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sat_per_byte",
            "description": "Deprecated, use sat_per_vbyte.\nA manual fee rate set in sat/vbyte that should be used when crafting the\nclosure transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "delivery_address",
            "description": "An optional address to send funds to in the case of a cooperative close.\nIf the channel was opened with an upfront shutdown script and this field\nis set, the request to close will fail because the channel must pay out\nto the upfront shutdown addresss.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sat_per_vbyte",
            "description": "A manual fee rate set in sat/vbyte that should be used when crafting the\nclosure transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/chanpolicy": {
      "post": {
        "summary": "lncli: `updatechanpolicy`\nUpdateChannelPolicy allows the caller to update the fee schedule and\nchannel policies for all channels globally, or a particular channel.",
        "operationId": "Lightning_UpdateChannelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPolicyUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcPolicyUpdateRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/debuglevel": {
      "post": {
        "summary": "lncli: `debuglevel`\nDebugLevel allows a caller to programmatically set the logging verbosity of\nlnd. The logging can be targeted according to a coarse daemon-wide logging\nlevel, or in a granular fashion to specify the logging for a target\nsub-system.",
        "operationId": "Lightning_DebugLevel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDebugLevelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcDebugLevelRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/fees": {
      "get": {
        "summary": "lncli: `feereport`\nFeeReport allows the caller to obtain a report detailing the current fee\nschedule enforced by the node globally for each channel.",
        "operationId": "Lightning_FeeReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcFeeReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/funding/step": {
      "post": {
        "summary": "FundingStateStep is an advanced funding related call that allows the caller\nto either execute some preparatory steps for a funding workflow, or\nmanually progress a funding workflow. The primary way a funding flow is\nidentified is via its pending channel ID. As an example, this method can be\nused to specify that we're expecting a funding flow for a particular\npending channel ID, for which we need to use specific parameters.\nAlternatively, this can be used to interactively drive PSBT signing for\nfunding for partially complete funding transactions.",
        "operationId": "Lightning_FundingStateStep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcFundingStateStepResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcFundingTransitionMsg"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/getinfo": {
      "get": {
        "summary": "lncli: `getinfo`\nGetInfo returns general information concerning the lightning node including\nit's identity pubkey, alias, the chains it is connected to, and information\nconcerning the number of open+pending channels.",
        "operationId": "Lightning_GetInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcGetInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/getrecoveryinfo": {
      "get": {
        "summary": "* lncli: `getrecoveryinfo`\nGetRecoveryInfo returns information concerning the recovery mode including\nwhether it's in a recovery mode, whether the recovery is finished, and the\nprogress made so far.",
        "operationId": "Lightning_GetRecoveryInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcGetRecoveryInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph": {
      "get": {
        "summary": "lncli: `describegraph`\nDescribeGraph returns a description of the latest graph state from the\npoint of view of the node. The graph information is partitioned into two\ncomponents: all the nodes/vertexes, and all the edges that connect the\nvertexes themselves. As this is a directed graph, the edges also contain\nthe node directional specific routing policy which includes: the time lock\ndelta, fee information, etc.",
        "operationId": "Lightning_DescribeGraph",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelGraph"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "include_unannounced",
            "description": "Whether unannounced channels are included in the response or not. If set,\nunannounced channels are included. Unannounced channels are both private\nchannels, and public channels that are not yet announced to the network.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/edge/{chan_id}": {
      "get": {
        "summary": "lncli: `getchaninfo`\nGetChanInfo returns the latest authenticated network announcement for the\ngiven channel identified by its channel ID: an 8-byte integer which\nuniquely identifies the location of transaction's funding output within the\nblockchain.",
        "operationId": "Lightning_GetChanInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelEdge"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "chan_id",
            "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/info": {
      "get": {
        "summary": "lncli: `getnetworkinfo`\nGetNetworkInfo returns some basic stats about the known channel graph from\nthe point of view of the node.",
        "operationId": "Lightning_GetNetworkInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNetworkInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/node/{pub_key}": {
      "get": {
        "summary": "lncli: `getnodeinfo`\nGetNodeInfo returns the latest advertised, aggregated, and authenticated\nchannel information for the specified node identified by its public key.",
        "operationId": "Lightning_GetNodeInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNodeInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "The 33-byte hex-encoded compressed public of the target node",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_channels",
            "description": "If true, will include all known channels associated with the node.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/nodemetrics": {
      "get": {
        "summary": "lncli: `getnodemetrics`\nGetNodeMetrics returns node metrics calculated from the graph. Currently\nthe only supported metric is betweenness centrality of individual nodes.",
        "operationId": "Lightning_GetNodeMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNodeMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "types",
            "description": "The requested node metrics.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "BETWEENNESS_CENTRALITY"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/routes/{pub_key}/{amt}": {
      "get": {
        "summary": "lncli: `queryroutes`\nQueryRoutes attempts to query the daemon's Channel Router for a possible\nroute to a target destination capable of carrying a specific amount of\nsatoshis. The returned route contains the full details required to craft and\nsend an HTLC, also including the necessary information that should be\npresent within the Sphinx packet encapsulated within the HTLC.",
        "description": "When using REST, the `dest_custom_records` map type can be set by appending\n`\u0026dest_custom_records[\u003crecord_number\u003e]=\u003crecord_data_base64_url_encoded\u003e`\nto the URL. Unfortunately this map type doesn't appear in the REST API\ndocumentation because of a bug in the grpc-gateway library.",
        "operationId": "Lightning_QueryRoutes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcQueryRoutesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "The 33-byte hex-encoded public key for the payment destination",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "amt",
            "description": "The amount to send expressed in satoshis.\n\nThe fields amt and amt_msat are mutually exclusive.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "amt_msat",
            "description": "The amount to send expressed in millisatoshis.\n\nThe fields amt and amt_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "final_cltv_delta",
            "description": "An optional CLTV delta from the current height that should be used for the\ntimelock of the final hop. Note that unlike SendPayment, QueryRoutes does\nnot add any additional block padding on top of final_ctlv_delta. This\npadding of a few blocks needs to be added manually or otherwise failures may\nhappen when a block comes in while the payment is in flight.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fee_limit.fixed",
            "description": "The fee limit expressed as a fixed amount of satoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fee_limit.fixed_msat",
            "description": "The fee limit expressed as a fixed amount of millisatoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fee_limit.percent",
            "description": "The fee limit expressed as a percentage of the payment amount.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ignored_nodes",
            "description": "A list of nodes to ignore during path finding. When using REST, these fields\nmust be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source_pub_key",
            "description": "The source node where the request route should originated from. If empty,\nself is assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "use_mission_control",
            "description": "If set to true, edge probabilities from mission control will be used to get\nthe optimal route.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "cltv_limit",
            "description": "An optional maximum total time lock for the route. If the source is empty or\nourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If\nzero, then the value of `--max-cltv-expiry` is used as the limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "outgoing_chan_id",
            "description": "The channel id of the channel that must be taken to the first hop. If zero,\nany channel may be used.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "last_hop_pubkey",
            "description": "The pubkey of the last hop of the route. If empty, any hop may be used.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dest_features",
            "description": "Features assumed to be supported by the final node. All transitive feature\ndependencies must also be set properly. For a given feature bit pair, either\noptional or remote may be set, but not both. If this field is nil or empty,\nthe router will try to load destination features from the graph as a\nfallback.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DATALOSS_PROTECT_REQ",
                "DATALOSS_PROTECT_OPT",
                "INITIAL_ROUING_SYNC",
                "UPFRONT_SHUTDOWN_SCRIPT_REQ",
                "UPFRONT_SHUTDOWN_SCRIPT_OPT",
                "GOSSIP_QUERIES_REQ",
                "GOSSIP_QUERIES_OPT",
                "TLV_ONION_REQ",
                "TLV_ONION_OPT",
                "EXT_GOSSIP_QUERIES_REQ",
                "EXT_GOSSIP_QUERIES_OPT",
                "STATIC_REMOTE_KEY_REQ",
                "STATIC_REMOTE_KEY_OPT",
                "PAYMENT_ADDR_REQ",
                "PAYMENT_ADDR_OPT",
                "MPP_REQ",
                "MPP_OPT",
                "WUMBO_CHANNELS_REQ",
                "WUMBO_CHANNELS_OPT",
                "ANCHORS_REQ",
                "ANCHORS_OPT",
                "ANCHORS_ZERO_FEE_HTLC_REQ",
                "ANCHORS_ZERO_FEE_HTLC_OPT",
                "AMP_REQ",
                "AMP_OPT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/subscribe": {
      "get": {
        "summary": "SubscribeChannelGraph launches a streaming RPC that allows the caller to\nreceive notifications upon any changes to the channel graph topology from\nthe point of view of the responding node. Events notified include: new\nnodes coming online, nodes updating their authenticated attributes, new\nchannels being advertised, updates in the routing policy for a directional\nchannel edge, and when channels are closed on-chain.",
        "operationId": "Lightning_SubscribeChannelGraph",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcGraphTopologyUpdate"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcGraphTopologyUpdate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/invoice/{r_hash_str}": {
      "get": {
        "summary": "lncli: `lookupinvoice`\nLookupInvoice attempts to look up an invoice according to its payment hash.\nThe passed payment hash *must* be exactly 32 bytes, if not, an error is\nreturned.",
        "operationId": "Lightning_LookupInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "r_hash_str",
            "description": "The hex-encoded payment hash of the invoice to be looked up. The passed\npayment hash must be exactly 32 bytes, otherwise an error is returned.\nDeprecated now that the REST gateway supports base64 encoding of bytes\nfields.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "r_hash",
            "description": "The payment hash of the invoice to be looked up. When using REST, this field\nmust be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/invoices": {
      "get": {
        "summary": "lncli: `listinvoices`\nListInvoices returns a list of all the invoices currently stored within the\ndatabase. Any active debug invoices are ignored. It has full support for\npaginated responses, allowing users to query for specific invoices through\ntheir add_index. This can be done by using either the first_index_offset or\nlast_index_offset fields included in the response as the index_offset of the\nnext request. By default, the first 100 invoices created will be returned.\nBackwards pagination is also supported through the Reversed flag.",
        "operationId": "Lightning_ListInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pending_only",
            "description": "If set, only invoices that are not settled and not canceled will be returned\nin the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "index_offset",
            "description": "The index of an invoice that will be used as either the start or end of a\nquery to determine which invoices should be returned in the response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "num_max_invoices",
            "description": "The max number of invoices to return in the response to this query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "reversed",
            "description": "If set, the invoices returned will result from seeking backwards from the\nspecified index offset. This can be used to paginate backwards.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "lncli: `addinvoice`\nAddInvoice attempts to add a new invoice to the invoice database. Any\nduplicated invoices are rejected, therefore all invoices *must* have a\nunique payment preimage.",
        "operationId": "Lightning_AddInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcAddInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcInvoice"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/invoices/subscribe": {
      "get": {
        "summary": "SubscribeInvoices returns a uni-directional stream (server -\u003e client) for\nnotifying the client of newly added/settled invoices. The caller can\noptionally specify the add_index and/or the settle_index. If the add_index\nis specified, then we'll first start by sending add invoice events for all\ninvoices with an add_index greater than the specified value. If the\nsettle_index is specified, the next, we'll send out all settle events for\ninvoices with a settle_index greater than the specified value. One or both\nof these fields can be set. If no fields are set, then we'll only send out\nthe latest add/settle events.",
        "operationId": "Lightning_SubscribeInvoices",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcInvoice"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "add_index",
            "description": "If specified (non-zero), then we'll first start by sending out\nnotifications for all added indexes with an add_index greater than this\nvalue. This allows callers to catch up on any events they missed while they\nweren't connected to the streaming RPC.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "settle_index",
            "description": "If specified (non-zero), then we'll first start by sending out\nnotifications for all settled indexes with an settle_index greater than\nthis value. This allows callers to catch up on any events they missed while\nthey weren't connected to the streaming RPC.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon": {
      "post": {
        "summary": "lncli: `bakemacaroon`\nBakeMacaroon allows the creation of a new macaroon with custom read and\nwrite permissions. No first-party caveats are added since this can be done\noffline.",
        "operationId": "Lightning_BakeMacaroon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcBakeMacaroonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcBakeMacaroonRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon/checkpermissions": {
      "post": {
        "summary": "CheckMacaroonPermissions checks whether a request follows the constraints\nimposed on the macaroon and that the macaroon is authorized to follow the\nprovided permissions.",
        "operationId": "Lightning_CheckMacaroonPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcCheckMacPermResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcCheckMacPermRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon/ids": {
      "get": {
        "summary": "lncli: `listmacaroonids`\nListMacaroonIDs returns all root key IDs that are in use.",
        "operationId": "Lightning_ListMacaroonIDs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListMacaroonIDsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon/permissions": {
      "get": {
        "summary": "lncli: `listpermissions`\nListPermissions lists all RPC method URIs and their required macaroon\npermissions to access them.",
        "operationId": "Lightning_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon/{root_key_id}": {
      "delete": {
        "summary": "lncli: `deletemacaroonid`\nDeleteMacaroonID deletes the specified macaroon ID and invalidates all\nmacaroons derived from that ID.",
        "operationId": "Lightning_DeleteMacaroonID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDeleteMacaroonIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "root_key_id",
            "description": "The root key ID to be removed.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/middleware": {
      "post": {
        "summary": "RegisterRPCMiddleware adds a new gRPC middleware to the interceptor chain. A\ngRPC middleware is software component external to lnd that aims to add\nadditional business logic to lnd by observing/intercepting/validating\nincoming gRPC client requests and (if needed) replacing/overwriting outgoing\nmessages before they're sent to the client. When registering the middleware\nmust identify itself and indicate what custom macaroon caveats it wants to\nbe responsible for. Only requests that contain a macaroon with that specific\ncustom caveat are then sent to the middleware for inspection. The other\noption is to register for the read-only mode in which all requests/responses\nare forwarded for interception to the middleware but the middleware is not\nallowed to modify any responses. As a security measure, _no_ middleware can\nmodify responses for requests made with _unencumbered_ macaroons!",
        "operationId": "Lightning_RegisterRPCMiddleware",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcRPCMiddlewareRequest"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcRPCMiddlewareRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcRPCMiddlewareResponse"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/newaddress": {
      "get": {
        "summary": "lncli: `newaddress`\nNewAddress creates a new address under control of the local wallet.",
        "operationId": "Lightning_NewAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNewAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "The type of address to generate.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "WITNESS_PUBKEY_HASH",
              "NESTED_PUBKEY_HASH",
              "UNUSED_WITNESS_PUBKEY_HASH",
              "UNUSED_NESTED_PUBKEY_HASH"
            ],
            "default": "WITNESS_PUBKEY_HASH"
          },
          {
            "name": "account",
            "description": "The name of the account to generate a new address for. If empty, the\ndefault wallet account is used.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/payment": {
      "delete": {
        "summary": "DeletePayment deletes an outgoing payment from DB. Note that it will not\nattempt to delete an In-Flight payment, since that would be unsafe.",
        "operationId": "Lightning_DeletePayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDeletePaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "payment_hash",
            "description": "Payment hash to delete.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "failed_htlcs_only",
            "description": "Only delete failed HTLCs from the payment, not the payment itself.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/payments": {
      "get": {
        "summary": "lncli: `listpayments`\nListPayments returns a list of all outgoing payments.",
        "operationId": "Lightning_ListPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "include_incomplete",
            "description": "If true, then return payments that have not yet fully completed. This means\nthat pending payments, as well as failed payments will show up if this\nfield is set to true. This flag doesn't change the meaning of the indices,\nwhich are tied to individual payments.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "index_offset",
            "description": "The index of a payment that will be used as either the start or end of a\nquery to determine which payments should be returned in the response. The\nindex_offset is exclusive. In the case of a zero index_offset, the query\nwill start with the oldest payment when paginating forwards, or will end\nwith the most recent payment when paginating backwards.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "max_payments",
            "description": "The maximal number of payments returned in the response to this query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "reversed",
            "description": "If set, the payments returned will result from seeking backwards from the\nspecified index offset. This can be used to paginate backwards. The order\nof the returned payments is always oldest first (ascending index order).",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "delete": {
        "summary": "DeleteAllPayments deletes all outgoing payments from DB. Note that it will\nnot attempt to delete In-Flight payments, since that would be unsafe.",
        "operationId": "Lightning_DeleteAllPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDeleteAllPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "failed_payments_only",
            "description": "Only delete failed payments.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "failed_htlcs_only",
            "description": "Only delete failed HTLCs from payments, not the payment itself.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/payreq/{pay_req}": {
      "get": {
        "summary": "lncli: `decodepayreq`\nDecodePayReq takes an encoded payment request string and attempts to decode\nit, returning a full description of the conditions encoded within the\npayment request.",
        "operationId": "Lightning_DecodePayReq",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPayReq"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pay_req",
            "description": "The payment request string to be decoded",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/peers": {
      "get": {
        "summary": "lncli: `listpeers`\nListPeers returns a verbose listing of all currently active peers.",
        "operationId": "Lightning_ListPeers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListPeersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "latest_error",
            "description": "If true, only the last error that our peer sent us will be returned with\nthe peer's information, rather than the full set of historic errors we have\nstored.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "lncli: `connect`\nConnectPeer attempts to establish a connection to a remote peer. This is at\nthe networking level, and is used for communication between nodes. This is\ndistinct from establishing a channel with a peer.",
        "operationId": "Lightning_ConnectPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcConnectPeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcConnectPeerRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/peers/subscribe": {
      "get": {
        "summary": "SubscribePeerEvents creates a uni-directional stream from the server to\nthe client in which any events relevant to the state of peers are sent\nover. Events include peers going online and offline.",
        "operationId": "Lightning_SubscribePeerEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcPeerEvent"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcPeerEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/peers/{pub_key}": {
      "delete": {
        "summary": "lncli: `disconnect`\nDisconnectPeer attempts to disconnect one peer from another identified by a\ngiven pubKey. In the case that we currently have a pending or active channel\nwith the target peer, then this action will be not be allowed.",
        "operationId": "Lightning_DisconnectPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDisconnectPeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "The pubkey of the node to disconnect from",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/signmessage": {
      "post": {
        "summary": "lncli: `signmessage`\nSignMessage signs a message with this node's private key. The returned\nsignature string is `zbase32` encoded and pubkey recoverable, meaning that\nonly the message digest and signature are needed for verification.",
        "operationId": "Lightning_SignMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSignMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSignMessageRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/stop": {
      "post": {
        "summary": "lncli: `stop`\nStopDaemon will send a shutdown request to the interrupt handler, triggering\na graceful shutdown of the daemon.",
        "operationId": "Lightning_StopDaemon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcStopResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcStopRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/switch": {
      "post": {
        "summary": "lncli: `fwdinghistory`\nForwardingHistory allows the caller to query the htlcswitch for a record of\nall HTLCs forwarded within the target time range, and integer offset\nwithin that time range, for a maximum number of events. If no maximum number\nof events is specified, up to 100 events will be returned. If no time-range\nis specified, then events will be returned in the order that they occured.",
        "description": "A list of forwarding events are returned. The size of each forwarding event\nis 40 bytes, and the max message size able to be returned in gRPC is 4 MiB.\nAs a result each message can only contain 50k entries. Each response has\nthe index offset of the last entry. The index offset can be provided to the\nrequest to allow the caller to skip a series of records.",
        "operationId": "Lightning_ForwardingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcForwardingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcForwardingHistoryRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions": {
      "get": {
        "summary": "lncli: `listchaintxns`\nGetTransactions returns a list describing all the known transactions\nrelevant to the wallet.",
        "operationId": "Lightning_GetTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcTransactionDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "start_height",
            "description": "The height from which to list transactions, inclusive. If this value is\ngreater than end_height, transactions will be read in reverse.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "end_height",
            "description": "The height until which to list transactions, inclusive. To include\nunconfirmed transactions, this value should be set to -1, which will\nreturn transactions from start_height until the current chain tip and\nunconfirmed transactions. If no end_height is provided, the call will\ndefault to this option.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "An optional filter to only include transactions relevant to an account.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "lncli: `sendcoins`\nSendCoins executes a request to send coins to a particular address. Unlike\nSendMany, this RPC call only allows creating a single output at a time. If\nneither target_conf, or sat_per_vbyte are set, then the internal wallet will\nconsult its fee model to determine a fee for the default confirmation\ntarget.",
        "operationId": "Lightning_SendCoins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendCoinsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendCoinsRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions/fee": {
      "get": {
        "summary": "lncli: `estimatefee`\nEstimateFee asks the chain backend to estimate the fee rate and total fees\nfor a transaction that pays to multiple specified outputs.",
        "description": "When using REST, the `AddrToAmount` map type can be set by appending\n`\u0026AddrToAmount[\u003caddress\u003e]=\u003camount_to_send\u003e` to the URL. Unfortunately this\nmap type doesn't appear in the REST API documentation because of a bug in\nthe grpc-gateway library.",
        "operationId": "Lightning_EstimateFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcEstimateFeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "target_conf",
            "description": "The target number of blocks that this transaction should be confirmed\nby.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "min_confs",
            "description": "The minimum number of confirmations each one of your outputs used for\nthe transaction must satisfy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "spend_unconfirmed",
            "description": "Whether unconfirmed outputs should be used as inputs for the transaction.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions/many": {
      "post": {
        "summary": "lncli: `sendmany`\nSendMany handles a request for a transaction that creates multiple specified\noutputs in parallel. If neither target_conf, or sat_per_vbyte are set, then\nthe internal wallet will consult its fee model to determine a fee for the\ndefault confirmation target.",
        "operationId": "Lightning_SendMany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendManyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendManyRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions/subscribe": {
      "get": {
        "summary": "SubscribeTransactions creates a uni-directional stream from the server to\nthe client in which any newly discovered transactions relevant to the\nwallet are sent over.",
        "operationId": "Lightning_SubscribeTransactions",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcTransaction"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of lnrpcTransaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "start_height",
            "description": "The height from which to list transactions, inclusive. If this value is\ngreater than end_height, transactions will be read in reverse.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "end_height",
            "description": "The height until which to list transactions, inclusive. To include\nunconfirmed transactions, this value should be set to -1, which will\nreturn transactions from start_height until the current chain tip and\nunconfirmed transactions. If no end_height is provided, the call will\ndefault to this option.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "An optional filter to only include transactions relevant to an account.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/utxos": {
      "get": {
        "summary": "lncli: `listunspent`\nDeprecated, use walletrpc.ListUnspent instead.",
        "description": "ListUnspent returns a list of all utxos spendable by the wallet with a\nnumber of confirmations between the specified minimum and maximum.",
        "operationId": "Lightning_ListUnspent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListUnspentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "min_confs",
            "description": "The minimum number of confirmations to be included.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "max_confs",
            "description": "The maximum number of confirmations to be included.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "account",
            "description": "An optional filter to only include outputs belonging to an account.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/verifymessage": {
      "post": {
        "summary": "lncli: `verifymessage`\nVerifyMessage verifies a signature over a msg. The signature must be\nzbase32 encoded and signed by an active node in the resident node's\nchannel database. In addition to returning the validity of the signature,\nVerifyMessage also returns the recovered pubkey from the signature.",
        "operationId": "Lightning_VerifyMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyMessageRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    }
  },
  "definitions": {
    "ChannelCloseSummaryClosureType": {
      "type": "string",
      "enum": [
        "COOPERATIVE_CLOSE",
        "LOCAL_FORCE_CLOSE",
        "REMOTE_FORCE_CLOSE",
        "BREACH_CLOSE",
        "FUNDING_CANCELED",
        "ABANDONED"
      ],
      "default": "COOPERATIVE_CLOSE"
    },
    "ChannelEventUpdateUpdateType": {
      "type": "string",
      "enum": [
        "OPEN_CHANNEL",
        "CLOSED_CHANNEL",
        "ACTIVE_CHANNEL",
        "INACTIVE_CHANNEL",
        "PENDING_OPEN_CHANNEL",
        "FULLY_RESOLVED_CHANNEL"
      ],
      "default": "OPEN_CHANNEL"
    },
    "FailureFailureCode": {
      "type": "string",
      "enum": [
        "RESERVED",
        "INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS",
        "INCORRECT_PAYMENT_AMOUNT",
        "FINAL_INCORRECT_CLTV_EXPIRY",
        "FINAL_INCORRECT_HTLC_AMOUNT",
        "FINAL_EXPIRY_TOO_SOON",
        "INVALID_REALM",
        "EXPIRY_TOO_SOON",
        "INVALID_ONION_VERSION",
        "INVALID_ONION_HMAC",
        "INVALID_ONION_KEY",
        "AMOUNT_BELOW_MINIMUM",
        "FEE_INSUFFICIENT",
        "INCORRECT_CLTV_EXPIRY",
        "CHANNEL_DISABLED",
        "TEMPORARY_CHANNEL_FAILURE",
        "REQUIRED_NODE_FEATURE_MISSING",
        "REQUIRED_CHANNEL_FEATURE_MISSING",
        "UNKNOWN_NEXT_PEER",
        "TEMPORARY_NODE_FAILURE",
        "PERMANENT_NODE_FAILURE",
        "PERMANENT_CHANNEL_FAILURE",
        "EXPIRY_TOO_FAR",
        "MPP_TIMEOUT",
        "INVALID_ONION_PAYLOAD",
        "INTERNAL_FAILURE",
        "UNKNOWN_FAILURE",
        "UNREADABLE_FAILURE"
      ],
      "default": "RESERVED",
      "description": " - RESERVED: The numbers assigned in this enumeration match the failure codes as\ndefined in BOLT #4. Because protobuf 3 requires enums to start with 0,\na RESERVED value is added.\n - INTERNAL_FAILURE: An internal error occurred.\n - UNKNOWN_FAILURE: The error source is known, but the failure itself couldn't be decoded.\n - UNREADABLE_FAILURE: An unreadable failure result is returned if the received failure message\ncannot be decrypted. In that case the error source is unknown."
    },
    "ForceClosedChannelAnchorState": {
      "type": "string",
      "enum": [
        "LIMBO",
        "RECOVERED",
        "LOST"
      ],
      "default": "LIMBO"
    },
    "HTLCAttemptHTLCStatus": {
      "type": "string",
      "enum": [
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "IN_FLIGHT"
    },
    "InvoiceInvoiceState": {
      "type": "string",
      "enum": [
        "OPEN",
        "SETTLED",
        "CANCELED",
        "ACCEPTED"
      ],
      "default": "OPEN"
    },
    "PaymentPaymentStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "PeerEventEventType": {
      "type": "string",
      "enum": [
        "PEER_ONLINE",
        "PEER_OFFLINE"
      ],
      "default": "PEER_ONLINE"
    },
    "PeerSyncType": {
      "type": "string",
      "enum": [
        "UNKNOWN_SYNC",
        "ACTIVE_SYNC",
        "PASSIVE_SYNC",
        "PINNED_SYNC"
      ],
      "default": "UNKNOWN_SYNC",
      "description": " - UNKNOWN_SYNC: Denotes that we cannot determine the peer's current sync type.\n - ACTIVE_SYNC: Denotes that we are actively receiving new graph updates from the peer.\n - PASSIVE_SYNC: Denotes that we are not receiving new graph updates from the peer.\n - PINNED_SYNC: Denotes that this peer is pinned into an active sync."
    },
    "PendingChannelsResponseClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel to be closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "The transaction id of the closing transaction"
        }
      }
    },
    "PendingChannelsResponseCommitments": {
      "type": "object",
      "properties": {
        "local_txid": {
          "type": "string",
          "description": "Hash of the local version of the commitment tx."
        },
        "remote_txid": {
          "type": "string",
          "description": "Hash of the remote version of the commitment tx."
        },
        "remote_pending_txid": {
          "type": "string",
          "description": "Hash of the remote pending version of the commitment tx."
        },
        "local_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the local\ncommitment."
        },
        "remote_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the remote\ncommitment."
        },
        "remote_pending_commit_fee_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount in satoshis calculated to be paid in fees for the remote\npending commitment."
        }
      }
    },
    "PendingChannelsResponseForceClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel to be force closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "The transaction id of the closing transaction"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in this pending channel"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "The height at which funds can be swept into the wallet"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "Remaining # of blocks until the commitment output can be swept.\nNegative values indicate how many blocks have passed since becoming\nmature."
        },
        "recovered_balance": {
          "type": "string",
          "format": "int64",
          "title": "The total value of funds successfully recovered from this channel"
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPendingHTLC"
          }
        },
        "anchor": {
          "$ref": "#/definitions/ForceClosedChannelAnchorState"
        }
      }
    },
    "PendingChannelsResponsePendingChannel": {
      "type": "object",
      "properties": {
        "remote_node_pub": {
          "type": "string"
        },
        "channel_point": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "local_balance": {
          "type": "string",
          "format": "int64"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64"
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum satoshis this node is required to reserve in its\nbalance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum satoshis the other node is required to reserve in its\nbalance."
        },
        "initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "The party that initiated opening the channel."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The commitment type used by this channel."
        }
      }
    },
    "PendingChannelsResponsePendingOpenChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel"
        },
        "confirmation_height": {
          "type": "integer",
          "format": "int64",
          "title": "The height at which this channel will be confirmed"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "The amount calculated to be paid in fees for the current set of\ncommitment transactions. The fee amount is persisted with the channel\nin order to allow the fee amount to be removed and recalculated with\neach channel state update, including updates that happen after a system\nrestart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "The required number of satoshis per kilo-weight that the requester will\npay at all times, for both the funding transaction and commitment\ntransaction. This value can later be updated once the channel is open."
        }
      }
    },
    "PendingChannelsResponseWaitingCloseChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "The pending channel waiting for closing tx to confirm"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in this channel"
        },
        "commitments": {
          "$ref": "#/definitions/PendingChannelsResponseCommitments",
          "description": "A list of valid commitment transactions. Any of these can confirm at\nthis point."
        }
      }
    },
    "lnrpcAMP": {
      "type": "object",
      "properties": {
        "root_share": {
          "type": "string",
          "format": "byte",
          "description": "An n-of-n secret share of the root seed from which child payment hashes\nand preimages are derived."
        },
        "set_id": {
          "type": "string",
          "format": "byte",
          "description": "An identifier for the HTLC set that this HTLC belongs to."
        },
        "child_index": {
          "type": "integer",
          "format": "int64",
          "description": "A nonce used to randomize the child preimage and child hash from a given\nroot_share."
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The payment hash of the AMP HTLC."
        },
        "preimage": {
          "type": "string",
          "format": "byte",
          "description": "The preimage used to settle this AMP htlc. This field will only be\npopulated if the invoice is in InvoiceState_ACCEPTED or\nInvoiceState_SETTLED."
        }
      },
      "description": "Details specific to AMP HTLCs."
    },
    "lnrpcAMPRecord": {
      "type": "object",
      "properties": {
        "root_share": {
          "type": "string",
          "format": "byte"
        },
        "set_id": {
          "type": "string",
          "format": "byte"
        },
        "child_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcAbandonChannelResponse": {
      "type": "object"
    },
    "lnrpcAddInvoiceResponse": {
      "type": "object",
      "properties": {
        "r_hash": {
          "type": "string",
          "format": "byte"
        },
        "payment_request": {
          "type": "string",
          "description": "A bare-bones invoice for a payment within the Lightning Network. With the\ndetails of the invoice, the sender has all the data necessary to send a\npayment to the recipient."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"add\" index of this invoice. Each newly created invoice will increment\nthis index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all added\ninvoices with an add_index greater than this one."
        },
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "The payment address of the generated invoice. This value should be used\nin all payments for this invoice as we require it for end to end\nsecurity."
        }
      }
    },
    "lnrpcAddressType": {
      "type": "string",
      "enum": [
        "WITNESS_PUBKEY_HASH",
        "NESTED_PUBKEY_HASH",
        "UNUSED_WITNESS_PUBKEY_HASH",
        "UNUSED_NESTED_PUBKEY_HASH"
      ],
      "default": "WITNESS_PUBKEY_HASH",
      "description": "- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)\n- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)",
      "title": "`AddressType` has to be one of:"
    },
    "lnrpcAmount": {
      "type": "object",
      "properties": {
        "sat": {
          "type": "string",
          "format": "uint64",
          "description": "Value denominated in satoshis."
        },
        "msat": {
          "type": "string",
          "format": "uint64",
          "description": "Value denominated in milli-satoshis."
        }
      }
    },
    "lnrpcBakeMacaroonRequest": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcMacaroonPermission"
          },
          "description": "The list of permissions the new macaroon should grant."
        },
        "root_key_id": {
          "type": "string",
          "format": "uint64",
          "description": "The root key ID used to create the macaroon, must be a positive integer."
        },
        "allow_external_permissions": {
          "type": "boolean",
          "description": "Informs the RPC on whether to allow external permissions that LND is not\naware of."
        }
      }
    },
    "lnrpcBakeMacaroonResponse": {
      "type": "object",
      "properties": {
        "macaroon": {
          "type": "string",
          "description": "The hex encoded macaroon, serialized in binary format."
        }
      }
    },
    "lnrpcBatchOpenChannel": {
      "type": "object",
      "properties": {
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey of the node to open a channel with. When using REST, this\nfield must be encoded as base64."
        },
        "local_funding_amount": {
          "type": "string",
          "format": "int64",
          "description": "The number of satoshis the wallet should commit to the channel."
        },
        "push_sat": {
          "type": "string",
          "format": "int64",
          "description": "The number of satoshis to push to the remote side as part of the initial\ncommitment state."
        },
        "private": {
          "type": "boolean",
          "description": "Whether this channel should be private, not announced to the greater\nnetwork."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum value in millisatoshi we will require for incoming HTLCs on\nthe channel."
        },
        "remote_csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The delay we require on the remote's commitment transaction. If this is\nnot set, it will be scaled automatically with the channel size."
        },
        "close_address": {
          "type": "string",
          "description": "Close address is an optional address which specifies the address to which\nfunds should be paid out to upon cooperative close. This field may only be\nset if the peer supports the option upfront feature bit (call listpeers\nto check). The remote peer will only accept cooperative closes to this\naddress if it is set.\n\nNote: If this value is set on channel creation, you will *not* be able to\ncooperatively close out to a different address."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "An optional, unique identifier of 32 random bytes that will be used as the\npending channel ID to identify the channel while it is in the pre-pending\nstate."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The explicit commitment type to use. Note this field will only be used if\nthe remote peer supports explicit channel negotiation."
        }
      }
    },
    "lnrpcBatchOpenChannelRequest": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcBatchOpenChannel"
          },
          "description": "The list of channels to open."
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "The target number of blocks that the funding transaction should be\nconfirmed by."
        },
        "sat_per_vbyte": {
          "type": "string",
          "format": "int64",
          "description": "A manual fee rate set in sat/vByte that should be used when crafting the\nfunding transaction."
        },
        "min_confs": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of confirmations each one of your outputs used for\nthe funding transaction must satisfy."
        },
        "spend_unconfirmed": {
          "type": "boolean",
          "description": "Whether unconfirmed outputs should be used as inputs for the funding\ntransaction."
        },
        "label": {
          "type": "string",
          "description": "An optional label for the batch transaction, limited to 500 characters."
        }
      }
    },
    "lnrpcBatchOpenChannelResponse": {
      "type": "object",
      "properties": {
        "pending_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPendingUpdate"
          }
        }
      }
    },
    "lnrpcChain": {
      "type": "object",
      "properties": {
        "chain": {
          "type": "string",
          "title": "The blockchain the node is on (eg bitcoin, litecoin)"
        },
        "network": {
          "type": "string",
          "title": "The network the node is on (eg regtest, testnet, mainnet)"
        }
      }
    },
    "lnrpcChanBackupSnapshot": {
      "type": "object",
      "properties": {
        "single_chan_backups": {
          "$ref": "#/definitions/lnrpcChannelBackups",
          "description": "The set of new channels that have been added since the last channel backup\nsnapshot was requested."
        },
        "multi_chan_backup": {
          "$ref": "#/definitions/lnrpcMultiChanBackup",
          "description": "A multi-channel backup that covers all open channels currently known to\nlnd."
        }
      }
    },
    "lnrpcChanPointShim": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "The size of the pre-crafted output to be used as the channel point for this\nchannel funding."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "The target channel point to refrence in created commitment transactions."
        },
        "local_key": {
          "$ref": "#/definitions/lnrpcKeyDescriptor",
          "description": "Our local key to use when creating the multi-sig output."
        },
        "remote_key": {
          "type": "string",
          "format": "byte",
          "description": "The key of the remote party to use when creating the multi-sig output."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "If non-zero, then this will be used as the pending channel ID on the wire\nprotocol to initate the funding request. This is an optional field, and\nshould only be set if the responder is already expecting a specific pending\nchannel ID."
        },
        "thaw_height": {
          "type": "integer",
          "format": "int64",
          "description": "This uint32 indicates if this channel is to be considered 'frozen'. A frozen\nchannel does not allow a cooperative channel close by the initiator. The\nthaw_height is the height that this restriction stops applying to the\nchannel. The height can be interpreted in two ways: as a relative height if\nthe value is less than 500,000, or as an absolute height otherwise."
        }
      }
    },
    "lnrpcChannel": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "title": "Whether this channel is active or not"
        },
        "remote_pubkey": {
          "type": "string",
          "title": "The identity pubkey of the remote node"
        },
        "channel_point": {
          "type": "string",
          "description": "The outpoint (txid:index) of the funding transaction. With this value, Bob\nwill be able to generate a signature for Alice's version of the commitment\ntransaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "The total amount of funds held in this channel"
        },
        "local_balance": {
          "type": "string",
          "format": "int64",
          "title": "This node's current balance in this channel"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64",
          "title": "The counterparty's current balance in this channel"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "The amount calculated to be paid in fees for the current set of commitment\ntransactions. The fee amount is persisted with the channel in order to\nallow the fee amount to be removed and recalculated with each channel state\nupdate, including updates that happen after a system restart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "The required number of satoshis per kilo-weight that the requester will pay\nat all times, for both the funding transaction and commitment transaction.\nThis value can later be updated once the channel is open."
        },
        "unsettled_balance": {
          "type": "string",
          "format": "int64",
          "title": "The unsettled balance in this channel"
        },
        "total_satoshis_sent": {
          "type": "string",
          "format": "int64",
          "description": "The total number of satoshis we've sent within this channel."
        },
        "total_satoshis_received": {
          "type": "string",
          "format": "int64",
          "description": "The total number of satoshis we've received within this channel."
        },
        "num_updates": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of updates conducted within this channel."
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLC"
          },
          "description": "The list of active, uncleared HTLCs currently pending within the channel."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "Deprecated. The CSV delay expressed in relative blocks. If the channel is\nforce closed, we will need to wait for this many blocks before we can regain\nour funds."
        },
        "private": {
          "type": "boolean",
          "description": "Whether this channel is advertised to the network or not."
        },
        "initiator": {
          "type": "boolean",
          "description": "True if we were the ones that created the channel."
        },
        "chan_status_flags": {
          "type": "string",
          "description": "A set of flags showing the current state of the channel."
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated. The minimum satoshis this node is required to reserve in its\nbalance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated. The minimum satoshis the other node is required to reserve in\nits balance."
        },
        "static_remote_key": {
          "type": "boolean",
          "description": "Deprecated. Use commitment_type."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The commitment type used by this channel."
        },
        "lifetime": {
          "type": "string",
          "format": "int64",
          "description": "The number of seconds that the channel has been monitored by the channel\nscoring system. Scores are currently not persisted, so this value may be\nless than the lifetime of the channel [EXPERIMENTAL]."
        },
        "uptime": {
          "type": "string",
          "format": "int64",
          "description": "The number of seconds that the remote peer has been observed as being online\nby the channel scoring system over the lifetime of the channel\n[EXPERIMENTAL]."
        },
        "close_address": {
          "type": "string",
          "description": "Close address is the address that we will enforce payout to on cooperative\nclose if the channel was opened utilizing option upfront shutdown. This\nvalue can be set on channel open by setting close_address in an open channel\nrequest. If this value is not set, you can still choose a payout address by\ncooperatively closing with the delivery_address field set."
        },
        "push_amount_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount that the initiator of the channel optionally pushed to the remote\nparty on channel open. This amount will be zero if the channel initiator did\nnot push any funds to the remote peer. If the initiator field is true, we\npushed this amount to our peer, if it is false, the remote peer pushed this\namount to us."
        },
        "thaw_height": {
          "type": "integer",
          "format": "int64",
          "description": "This uint32 indicates if this channel is to be considered 'frozen'. A\nfrozen channel doest not allow a cooperative channel close by the\ninitiator. The thaw_height is the height that this restriction stops\napplying to the channel. This field is optional, not setting it or using a\nvalue of zero will mean the channel has no additional restrictions. The\nheight can be interpreted in two ways: as a relative height if the value is\nless than 500,000, or as an absolute height otherwise."
        },
        "local_constraints": {
          "$ref": "#/definitions/lnrpcChannelConstraints",
          "description": "List constraints for the local node."
        },
        "remote_constraints": {
          "$ref": "#/definitions/lnrpcChannelConstraints",
          "description": "List constraints for the remote node."
        }
      }
    },
    "lnrpcChannelAcceptRequest": {
      "type": "object",
      "properties": {
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey of the node that wishes to open an inbound channel."
        },
        "chain_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the genesis block that the proposed channel resides in."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel id."
        },
        "funding_amt": {
          "type": "string",
          "format": "uint64",
          "description": "The funding amount in satoshis that initiator wishes to use in the\nchannel."
        },
        "push_amt": {
          "type": "string",
          "format": "uint64",
          "description": "The push amount of the proposed channel in millisatoshis."
        },
        "dust_limit": {
          "type": "string",
          "format": "uint64",
          "description": "The dust limit of the initiator's commitment tx."
        },
        "max_value_in_flight": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of coins in millisatoshis that can be pending in this\nchannel."
        },
        "channel_reserve": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum amount of satoshis the initiator requires us to have at all\ntimes."
        },
        "min_htlc": {
          "type": "string",
          "format": "uint64",
          "description": "The smallest HTLC in millisatoshis that the initiator will accept."
        },
        "fee_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "The initial fee rate that the initiator suggests for both commitment\ntransactions."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The number of blocks to use for the relative time lock in the pay-to-self\noutput of both commitment transactions."
        },
        "max_accepted_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of incoming HTLC's that the initiator will accept."
        },
        "channel_flags": {
          "type": "integer",
          "format": "int64",
          "description": "A bit-field which the initiator uses to specify proposed channel\nbehavior."
        }
      }
    },
    "lnrpcChannelAcceptResponse": {
      "type": "object",
      "properties": {
        "accept": {
          "type": "boolean",
          "description": "Whether or not the client accepts the channel."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel id to which this response applies."
        },
        "error": {
          "type": "string",
          "description": "An optional error to send the initiating party to indicate why the channel\nwas rejected. This field *should not* contain sensitive information, it will\nbe sent to the initiating party. This field should only be set if accept is\nfalse, the channel will be rejected if an error is set with accept=true\nbecause the meaning of this response is ambiguous. Limited to 500\ncharacters."
        },
        "upfront_shutdown": {
          "type": "string",
          "description": "The upfront shutdown address to use if the initiating peer supports option\nupfront shutdown script (see ListPeers for the features supported). Note\nthat the channel open will fail if this value is set for a peer that does\nnot support this feature bit."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The csv delay (in blocks) that we require for the remote party."
        },
        "reserve_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The reserve amount in satoshis that we require the remote peer to adhere to.\nWe require that the remote peer always have some reserve amount allocated to\nthem so that there is always a disincentive to broadcast old state (if they\nhold 0 sats on their side of the channel, there is nothing to lose)."
        },
        "in_flight_max_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of funds in millisatoshis that we allow the remote peer\nto have in outstanding htlcs."
        },
        "max_htlc_count": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of htlcs that the remote peer can offer us."
        },
        "min_htlc_in": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum value in millisatoshis for incoming htlcs on the channel."
        },
        "min_accept_depth": {
          "type": "integer",
          "format": "int64",
          "description": "The number of confirmations we require before we consider the channel open."
        }
      }
    },
    "lnrpcChannelBackup": {
      "type": "object",
      "properties": {
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "Identifies the channel that this backup belongs to."
        },
        "chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "Is an encrypted single-chan backup. this can be passed to\nRestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in\norder to trigger the recovery protocol. When using REST, this field must be\nencoded as base64."
        }
      }
    },
    "lnrpcChannelBackups": {
      "type": "object",
      "properties": {
        "chan_backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelBackup"
          },
          "description": "A set of single-chan static channel backups."
        }
      }
    },
    "lnrpcChannelBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated. Sum of channels balances denominated in satoshis"
        },
        "pending_open_balance": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated. Sum of channels pending balances denominated in satoshis"
        },
        "local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels local balances."
        },
        "remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels remote balances."
        },
        "unsettled_local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels local unsettled balances."
        },
        "unsettled_remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels remote unsettled balances."
        },
        "pending_open_local_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels pending local balances."
        },
        "pending_open_remote_balance": {
          "$ref": "#/definitions/lnrpcAmount",
          "description": "Sum of channels pending remote balances."
        }
      }
    },
    "lnrpcChannelCloseSummary": {
      "type": "object",
      "properties": {
        "channel_point": {
          "type": "string",
          "description": "The outpoint (txid:index) of the funding transaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel."
        },
        "chain_hash": {
          "type": "string",
          "description": "The hash of the genesis block that this channel resides within."
        },
        "closing_tx_hash": {
          "type": "string",
          "description": "The txid of the transaction which ultimately closed this channel."
        },
        "remote_pubkey": {
          "type": "string",
          "description": "Public key of the remote peer that we formerly had a channel with."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "description": "Total capacity of the channel."
        },
        "close_height": {
          "type": "integer",
          "format": "int64",
          "description": "Height at which the funding transaction was spent."
        },
        "settled_balance": {
          "type": "string",
          "format": "int64",
          "title": "Settled balance at the time of channel closure"
        },
        "time_locked_balance": {
          "type": "string",
          "format": "int64",
          "title": "The sum of all the time-locked outputs at the time of channel closure"
        },
        "close_type": {
          "$ref": "#/definitions/ChannelCloseSummaryClosureType",
          "description": "Details on how the channel was closed."
        },
        "open_initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "Open initiator is the party that initiated opening the channel. Note that\nthis value may be unknown if the channel was closed before we migrated to\nstore open channel information after close."
        },
        "close_initiator": {
          "$ref": "#/definitions/lnrpcInitiator",
          "description": "Close initiator indicates which party initiated the close. This value will\nbe unknown for channels that were cooperatively closed before we started\ntracking cooperative close initiators. Note that this indicates which party\ninitiated a close, and it is possible for both to initiate cooperative or\nforce closes, although only one party's close will be confirmed on chain."
        },
        "resolutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcResolution"
          }
        }
      }
    },
    "lnrpcChannelCloseUpdate": {
      "type": "object",
      "properties": {
        "closing_txid": {
          "type": "string",
          "format": "byte"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "lnrpcChannelConstraints": {
      "type": "object",
      "properties": {
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The CSV delay expressed in relative blocks. If the channel is force closed,\nwe will need to wait for this many blocks before we can regain our funds."
        },
        "chan_reserve_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum satoshis this node is required to reserve in its balance."
        },
        "dust_limit_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The dust limit (in satoshis) of the initiator's commitment tx."
        },
        "max_pending_amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of coins in millisatoshis that can be pending in this\nchannel."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The smallest HTLC in millisatoshis that the initiator will accept."
        },
        "max_accepted_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of incoming HTLC's that the initiator will accept."
        }
      }
    },
    "lnrpcChannelEdge": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_point": {
          "type": "string"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "node1_pub": {
          "type": "string"
        },
        "node2_pub": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "node1_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "node2_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        }
      },
      "description": "A fully authenticated channel along with all its unique attributes.\nOnce an authenticated channel announcement has been processed on the network,\nthen an instance of ChannelEdgeInfo encapsulating the channels attributes is\nstored. The other portions relevant to routing policy of a channel are stored\nwithin a ChannelEdgePolicy for each direction of the channel."
    },
    "lnrpcChannelEdgeUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "routing_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "advertising_node": {
          "type": "string"
        },
        "connecting_node": {
          "type": "string"
        }
      }
    },
    "lnrpcChannelEventUpdate": {
      "type": "object",
      "properties": {
        "open_channel": {
          "$ref": "#/definitions/lnrpcChannel"
        },
        "closed_channel": {
          "$ref": "#/definitions/lnrpcChannelCloseSummary"
        },
        "active_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "inactive_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "pending_open_channel": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "fully_resolved_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "type": {
          "$ref": "#/definitions/ChannelEventUpdateUpdateType"
        }
      }
    },
    "lnrpcChannelFeeReport": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The short channel id that this fee report belongs to."
        },
        "channel_point": {
          "type": "string",
          "description": "The channel that this fee report belongs to."
        },
        "base_fee_msat": {
          "type": "string",
          "format": "int64",
          "description": "The base fee charged regardless of the number of milli-satoshis sent."
        },
        "fee_per_mil": {
          "type": "string",
          "format": "int64",
          "description": "The amount charged per milli-satoshis transferred expressed in\nmillionths of a satoshi."
        },
        "fee_rate": {
          "type": "number",
          "format": "double",
          "description": "The effective fee rate in milli-satoshis. Computed by dividing the\nfee_per_mil value by 1 million."
        }
      }
    },
    "lnrpcChannelGraph": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcLightningNode"
          },
          "title": "The list of `LightningNode`s in this channel graph"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "title": "The list of `ChannelEdge`s in this channel graph"
        }
      },
      "description": "Returns a new instance of the directed channel graph."
    },
    "lnrpcChannelOpenUpdate": {
      "type": "object",
      "properties": {
        "channel_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcChannelPoint": {
      "type": "object",
      "properties": {
        "funding_txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "Txid of the funding transaction. When using REST, this field must be\nencoded as base64."
        },
        "funding_txid_str": {
          "type": "string",
          "description": "Hex-encoded string representing the byte-reversed hash of the funding\ntransaction."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "title": "The index of the output of the funding transaction"
        }
      }
    },
    "lnrpcChannelUpdate": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "The signature that validates the announced data and proves the ownership\nof node id."
        },
        "chain_hash": {
          "type": "string",
          "format": "byte",
          "description": "The target chain that this channel was opened within. This value\nshould be the genesis hash of the target chain. Along with the short\nchannel ID, this uniquely identifies the channel globally in a\nblockchain."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique description of the funding transaction."
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp that allows ordering in the case of multiple announcements.\nWe should ignore the message if timestamp is not greater than the\nlast-received."
        },
        "message_flags": {
          "type": "integer",
          "format": "int64",
          "description": "The bitfield that describes whether optional fields are present in this\nupdate. Currently, the least-significant bit must be set to 1 if the\noptional field MaxHtlc is present."
        },
        "channel_flags": {
          "type": "integer",
          "format": "int64",
          "description": "The bitfield that describes additional meta-data concerning how the\nupdate is to be interpreted. Currently, the least-significant bit must be\nset to 0 if the creating node corresponds to the first node in the\npreviously sent channel announcement and 1 otherwise. If the second bit\nis set, then the channel is set to be disabled."
        },
        "time_lock_delta": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum number of blocks this node requires to be added to the expiry\nof HTLCs. This is a security parameter determined by the node operator.\nThis value represents the required gap between the time locks of the\nincoming and outgoing HTLC's set to this node."
        },
        "htlc_minimum_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum HTLC value which will be accepted."
        },
        "base_fee": {
          "type": "integer",
          "format": "int64",
          "description": "The base fee that must be used for incoming HTLC's to this particular\nchannel. This value will be tacked onto the required for a payment\nindependent of the size of the payment."
        },
        "fee_rate": {
          "type": "integer",
          "format": "int64",
          "description": "The fee rate that will be charged per millionth of a satoshi."
        },
        "htlc_maximum_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum HTLC value which will be accepted."
        },
        "extra_opaque_data": {
          "type": "string",
          "format": "byte",
          "description": "The set of data that was appended to this message, some of which we may\nnot actually know how to iterate or parse. By holding onto this data, we\nensure that we're able to properly validate the set of signatures that\ncover these new fields, and ensure we're able to make upgrades to the\nnetwork in a forwards compatible manner."
        }
      }
    },
    "lnrpcCheckMacPermRequest": {
      "type": "object",
      "properties": {
        "macaroon": {
          "type": "string",
          "format": "byte"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcMacaroonPermission"
          }
        },
        "fullMethod": {
          "type": "string"
        }
      }
    },
    "lnrpcCheckMacPermResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "lnrpcCloseStatusUpdate": {
      "type": "object",
      "properties": {
        "close_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "chan_close": {
          "$ref": "#/definitions/lnrpcChannelCloseUpdate"
        }
      }
    },
    "lnrpcClosedChannelUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "closed_height": {
          "type": "integer",
          "format": "int64"
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcClosedChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelCloseSummary"
          }
        }
      }
    },
    "lnrpcCommitmentType": {
      "type": "string",
      "enum": [
        "UNKNOWN_COMMITMENT_TYPE",
        "LEGACY",
        "STATIC_REMOTE_KEY",
        "ANCHORS"
      ],
      "default": "UNKNOWN_COMMITMENT_TYPE",
      "description": " - UNKNOWN_COMMITMENT_TYPE: Returned when the commitment type isn't known or unavailable.\n - LEGACY: A channel using the legacy commitment format having tweaked to_remote\nkeys.\n - STATIC_REMOTE_KEY: A channel that uses the modern commitment format where the key in the\noutput of the remote party does not change each state. This makes back\nup and recovery easier as when the channel is closed, the funds go\ndirectly to that key.\n - ANCHORS: A channel that uses a commitment format that has anchor outputs on the\ncommitments, allowing fee bumping after a force close transaction has\nbeen broadcast."
    },
    "lnrpcConnectPeerRequest": {
      "type": "object",
      "properties": {
        "addr": {
          "$ref": "#/definitions/lnrpcLightningAddress",
          "title": "Lightning address of the peer, in the format `\u003cpubkey\u003e@host`"
        },
        "perm": {
          "type": "boolean",
          "description": "If set, the daemon will attempt to persistently connect to the target\npeer. Otherwise, the call will be synchronous."
        },
        "timeout": {
          "type": "string",
          "format": "uint64",
          "description": "The connection timeout value (in seconds) for this request. It won't affect\nother requests."
        }
      }
    },
    "lnrpcConnectPeerResponse": {
      "type": "object"
    },
    "lnrpcDebugLevelRequest": {
      "type": "object",
      "properties": {
        "show": {
          "type": "boolean"
        },
        "level_spec": {
          "type": "string"
        }
      }
    },
    "lnrpcDebugLevelResponse": {
      "type": "object",
      "properties": {
        "sub_systems": {
          "type": "string"
        }
      }
    },
    "lnrpcDeleteAllPaymentsResponse": {
      "type": "object"
    },
    "lnrpcDeleteMacaroonIDResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "A boolean indicates that the deletion is successful."
        }
      }
    },
    "lnrpcDeletePaymentResponse": {
      "type": "object"
    },
    "lnrpcDisconnectPeerResponse": {
      "type": "object"
    },
    "lnrpcEdgeLocator": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "The short channel id of this edge."
        },
        "direction_reverse": {
          "type": "boolean",
          "description": "The direction of this edge. If direction_reverse is false, the direction\nof this edge is from the channel endpoint with the lexicographically smaller\npub key to the endpoint with the larger pub key. If direction_reverse is\nis true, the edge goes the other way."
        }
      }
    },
    "lnrpcEstimateFeeResponse": {
      "type": "object",
      "properties": {
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "description": "The total fee in satoshis."
        },
        "feerate_sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use sat_per_vbyte.\nThe fee rate in satoshi/vbyte."
        },
        "sat_per_vbyte": {
          "type": "string",
          "format": "uint64",
          "description": "The fee rate in satoshi/vbyte."
        }
      }
    },
    "lnrpcFailedUpdate": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "title": "The outpoint in format txid:n"
        },
        "reason": {
          "$ref": "#/definitions/lnrpcUpdateFailure",
          "description": "Reason for the policy update failure."
        },
        "update_error": {
          "type": "string",
          "description": "A string representation of the policy update error."
        }
      }
    },
    "lnrpcFailure": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/FailureFailureCode",
          "title": "Failure code as defined in the Lightning spec"
        },
        "channel_update": {
          "$ref": "#/definitions/lnrpcChannelUpdate",
          "description": "An optional channel update message."
        },
        "htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "A failure type-dependent htlc value."
        },
        "onion_sha_256": {
          "type": "string",
          "format": "byte",
          "description": "The sha256 sum of the onion payload."
        },
        "cltv_expiry": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent cltv expiry value."
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent flags value."
        },
        "failure_source_index": {
          "type": "integer",
          "format": "int64",
          "description": "The position in the path of the intermediate or final node that generated\nthe failure message. Position zero is the sender node."
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "description": "A failure type-dependent block height."
        }
      }
    },
    "lnrpcFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "is_required": {
          "type": "boolean"
        },
        "is_known": {
          "type": "boolean"
        }
      }
    },
    "lnrpcFeatureBit": {
      "type": "string",
      "enum": [
        "DATALOSS_PROTECT_REQ",
        "DATALOSS_PROTECT_OPT",
        "INITIAL_ROUING_SYNC",
        "UPFRONT_SHUTDOWN_SCRIPT_REQ",
        "UPFRONT_SHUTDOWN_SCRIPT_OPT",
        "GOSSIP_QUERIES_REQ",
        "GOSSIP_QUERIES_OPT",
        "TLV_ONION_REQ",
        "TLV_ONION_OPT",
        "EXT_GOSSIP_QUERIES_REQ",
        "EXT_GOSSIP_QUERIES_OPT",
        "STATIC_REMOTE_KEY_REQ",
        "STATIC_REMOTE_KEY_OPT",
        "PAYMENT_ADDR_REQ",
        "PAYMENT_ADDR_OPT",
        "MPP_REQ",
        "MPP_OPT",
        "WUMBO_CHANNELS_REQ",
        "WUMBO_CHANNELS_OPT",
        "ANCHORS_REQ",
        "ANCHORS_OPT",
        "ANCHORS_ZERO_FEE_HTLC_REQ",
        "ANCHORS_ZERO_FEE_HTLC_OPT",
        "AMP_REQ",
        "AMP_OPT"
      ],
      "default": "DATALOSS_PROTECT_REQ"
    },
    "lnrpcFeeLimit": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a fixed amount of satoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "fixed_msat": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a fixed amount of millisatoshis.\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "percent": {
          "type": "string",
          "format": "int64",
          "description": "The fee limit expressed as a percentage of the payment amount."
        }
      }
    },
    "lnrpcFeeReportResponse": {
      "type": "object",
      "properties": {
        "channel_fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelFeeReport"
          },
          "description": "An array of channel fee reports which describes the current fee schedule\nfor each channel."
        },
        "day_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 24 hrs."
        },
        "week_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 1 week."
        },
        "month_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of fee revenue (in satoshis) the switch has collected\nover the past 1 month."
        }
      }
    },
    "lnrpcFloatMetric": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "Arbitrary float value."
        },
        "normalized_value": {
          "type": "number",
          "format": "double",
          "description": "The value normalized to [0,1] or [-1,1]."
        }
      }
    },
    "lnrpcForwardingEvent": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "Timestamp is the time (unix epoch offset) that this circuit was\ncompleted. Deprecated by timestamp_ns."
        },
        "chan_id_in": {
          "type": "string",
          "format": "uint64",
          "description": "The incoming channel ID that carried the HTLC that created the circuit."
        },
        "chan_id_out": {
          "type": "string",
          "format": "uint64",
          "description": "The outgoing channel ID that carried the preimage that completed the\ncircuit."
        },
        "amt_in": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in satoshis) of the incoming HTLC that created half\nthe circuit."
        },
        "amt_out": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in satoshis) of the outgoing HTLC that created the\nsecond half of the circuit."
        },
        "fee": {
          "type": "string",
          "format": "uint64",
          "description": "The total fee (in satoshis) that this payment circuit carried."
        },
        "fee_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total fee (in milli-satoshis) that this payment circuit carried."
        },
        "amt_in_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in milli-satoshis) of the incoming HTLC that created\nhalf the circuit."
        },
        "amt_out_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount (in milli-satoshis) of the outgoing HTLC that created\nthe second half of the circuit."
        },
        "timestamp_ns": {
          "type": "string",
          "format": "uint64",
          "description": "The number of nanoseconds elapsed since January 1, 1970 UTC when this\ncircuit was completed."
        }
      }
    },
    "lnrpcForwardingHistoryRequest": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "uint64",
          "description": "Start time is the starting point of the forwarding history request. All\nrecords beyond this point will be included, respecting the end time, and\nthe index offset."
        },
        "end_time": {
          "type": "string",
          "format": "uint64",
          "description": "End time is the end point of the forwarding history request. The\nresponse will carry at most 50k records between the start time and the\nend time. The index offset can be used to implement pagination."
        },
        "index_offset": {
          "type": "integer",
          "format": "int64",
          "description": "Index offset is the offset in the time series to start at. As each\nresponse can only contain 50k records, callers can use this to skip\naround within a packed time series."
        },
        "num_max_events": {
          "type": "integer",
          "format": "int64",
          "description": "The max number of events to return in the response to this query."
        }
      }
    },
    "lnrpcForwardingHistoryResponse": {
      "type": "object",
      "properties": {
        "forwarding_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcForwardingEvent"
          },
          "description": "A list of forwarding events from the time slice of the time series\nspecified in the request."
        },
        "last_offset_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the last time in the set of returned forwarding events. Can\nbe used to seek further, pagination style."
        }
      }
    },
    "lnrpcFundingPsbtFinalize": {
      "type": "object",
      "properties": {
        "signed_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded PSBT that contains all witness data to send the exact channel\ncapacity amount to the PK script returned in the open channel message in a\nprevious step. Cannot be set at the same time as final_raw_tx."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to get the PSBT for."
        },
        "final_raw_tx": {
          "type": "string",
          "format": "byte",
          "description": "As an alternative to the signed PSBT with all witness data, the final raw\nwire format transaction can also be specified directly. Cannot be set at the\nsame time as signed_psbt."
        }
      }
    },
    "lnrpcFundingPsbtVerify": {
      "type": "object",
      "properties": {
        "funded_psbt": {
          "type": "string",
          "format": "byte",
          "description": "The funded but not yet signed PSBT that sends the exact channel capacity\namount to the PK script returned in the open channel message in a previous\nstep."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to get the PSBT for."
        }
      }
    },
    "lnrpcFundingShim": {
      "type": "object",
      "properties": {
        "chan_point_shim": {
          "$ref": "#/definitions/lnrpcChanPointShim",
          "description": "A channel shim where the channel point was fully constructed outside\nof lnd's wallet and the transaction might already be published."
        },
        "psbt_shim": {
          "$ref": "#/definitions/lnrpcPsbtShim",
          "description": "A channel shim that uses a PSBT to fund and sign the channel funding\ntransaction."
        }
      }
    },
    "lnrpcFundingShimCancel": {
      "type": "object",
      "properties": {
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the channel to cancel the funding shim for."
        }
      }
    },
    "lnrpcFundingStateStepResp": {
      "type": "object"
    },
    "lnrpcFundingTransitionMsg": {
      "type": "object",
      "properties": {
        "shim_register": {
          "$ref": "#/definitions/lnrpcFundingShim",
          "description": "The funding shim to register. This should be used before any\nchannel funding has began by the remote party, as it is intended as a\npreparatory step for the full channel funding."
        },
        "shim_cancel": {
          "$ref": "#/definitions/lnrpcFundingShimCancel",
          "description": "Used to cancel an existing registered funding shim."
        },
        "psbt_verify": {
          "$ref": "#/definitions/lnrpcFundingPsbtVerify",
          "description": "Used to continue a funding flow that was initiated to be executed\nthrough a PSBT. This step verifies that the PSBT contains the correct\noutputs to fund the channel."
        },
        "psbt_finalize": {
          "$ref": "#/definitions/lnrpcFundingPsbtFinalize",
          "description": "Used to continue a funding flow that was initiated to be executed\nthrough a PSBT. This step finalizes the funded and signed PSBT, finishes\nnegotiation with the peer and finally publishes the resulting funding\ntransaction."
        }
      }
    },
    "lnrpcGetInfoResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the LND software that the node is running."
        },
        "commit_hash": {
          "type": "string",
          "description": "The SHA1 commit hash that the daemon is compiled with."
        },
        "identity_pubkey": {
          "type": "string",
          "description": "The identity pubkey of the current node."
        },
        "alias": {
          "type": "string",
          "title": "If applicable, the alias of the current node, e.g. \"bob\""
        },
        "color": {
          "type": "string",
          "title": "The color of the current node in hex code format"
        },
        "num_pending_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of pending channels"
        },
        "num_active_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of active channels"
        },
        "num_inactive_channels": {
          "type": "integer",
          "format": "int64",
          "title": "Number of inactive channels"
        },
        "num_peers": {
          "type": "integer",
          "format": "int64",
          "title": "Number of peers"
        },
        "block_height": {
          "type": "integer",
          "format": "int64",
          "title": "The node's current view of the height of the best block"
        },
        "block_hash": {
          "type": "string",
          "title": "The node's current view of the hash of the best block"
        },
        "best_header_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of the block best known to the wallet"
        },
        "synced_to_chain": {
          "type": "boolean",
          "title": "Whether the wallet's view is synced to the main chain"
        },
        "synced_to_graph": {
          "type": "boolean",
          "description": "Whether we consider ourselves synced with the public channel graph."
        },
        "testnet": {
          "type": "boolean",
          "title": "Whether the current node is connected to testnet. This field is\ndeprecated and the network field should be used instead"
        },
        "chains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChain"
          },
          "title": "A list of active chains the node is connected to"
        },
        "uris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The URIs of the current node."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features that our node has advertised in our init message, node\nannouncements and invoices."
        }
      }
    },
    "lnrpcGetRecoveryInfoResponse": {
      "type": "object",
      "properties": {
        "recovery_mode": {
          "type": "boolean",
          "title": "Whether the wallet is in recovery mode"
        },
        "recovery_finished": {
          "type": "boolean",
          "title": "Whether the wallet recovery progress is finished"
        },
        "progress": {
          "type": "number",
          "format": "double",
          "description": "The recovery progress, ranging from 0 to 1."
        }
      }
    },
    "lnrpcGraphTopologyUpdate": {
      "type": "object",
      "properties": {
        "node_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeUpdate"
          }
        },
        "channel_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdgeUpdate"
          }
        },
        "closed_chans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcClosedChannelUpdate"
          }
        }
      }
    },
    "lnrpcHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "hash_lock": {
          "type": "string",
          "format": "byte"
        },
        "expiration_height": {
          "type": "integer",
          "format": "int64"
        },
        "htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the channel."
        },
        "forwarding_channel": {
          "type": "string",
          "format": "uint64",
          "description": "If this HTLC is involved in a forwarding operation, this field indicates\nthe forwarding channel. For an outgoing htlc, it is the incoming channel.\nFor an incoming htlc, it is the outgoing channel. When the htlc\noriginates from this node or this node is the final destination,\nforwarding_channel will be zero. The forwarding channel will also be zero\nfor htlcs that need to be forwarded but don't have a forwarding decision\npersisted yet."
        },
        "forwarding_htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the forwarding channel."
        }
      }
    },
    "lnrpcHTLCAttempt": {
      "type": "object",
      "properties": {
        "attempt_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique ID that is used for this attempt."
        },
        "status": {
          "$ref": "#/definitions/HTLCAttemptHTLCStatus",
          "description": "The status of the HTLC."
        },
        "route": {
          "$ref": "#/definitions/lnrpcRoute",
          "description": "The route taken by this HTLC."
        },
        "attempt_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which this HTLC was sent."
        },
        "resolve_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which this HTLC was settled or failed.\nThis value will not be set if the HTLC is still IN_FLIGHT."
        },
        "failure": {
          "$ref": "#/definitions/lnrpcFailure",
          "description": "Detailed htlc failure info."
        },
        "preimage": {
          "type": "string",
          "format": "byte",
          "description": "The preimage that was used to settle the HTLC."
        }
      }
    },
    "lnrpcHop": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique channel ID for the channel. The first 3 bytes are the block\nheight, the next 3 the index within the block, and the last 2 bytes are the\noutput index for the channel."
        },
        "chan_capacity": {
          "type": "string",
          "format": "int64"
        },
        "amt_to_forward": {
          "type": "string",
          "format": "int64"
        },
        "fee": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "integer",
          "format": "int64"
        },
        "amt_to_forward_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64"
        },
        "pub_key": {
          "type": "string",
          "description": "An optional public key of the hop. If the public key is given, the payment\ncan be executed without relying on a copy of the channel graph."
        },
        "tlv_payload": {
          "type": "boolean",
          "description": "If set to true, then this hop will be encoded using the new variable length\nTLV format. Note that if any custom tlv_records below are specified, then\nthis field MUST be set to true for them to be encoded properly."
        },
        "mpp_record": {
          "$ref": "#/definitions/lnrpcMPPRecord",
          "description": "An optional TLV record that signals the use of an MPP payment. If present,\nthe receiver will enforce that the same mpp_record is included in the final\nhop payload of all non-zero payments in the HTLC set. If empty, a regular\nsingle-shot payment is or was attempted."
        },
        "amp_record": {
          "$ref": "#/definitions/lnrpcAMPRecord",
          "description": "An optional TLV record that signals the use of an AMP payment. If present,\nthe receiver will treat all received payments including the same\n(payment_addr, set_id) pair  as being part of one logical payment. The\npayment will be settled by XORing the root_share's together and deriving the\nchild hashes and preimages according to BOLT XX. Must be used in conjunction\nwith mpp_record."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "An optional set of key-value TLV records. This is useful within the context\nof the SendToRoute call as it allows callers to specify arbitrary K-V pairs\nto drop off at each hop within the onion."
        }
      }
    },
    "lnrpcHopHint": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "description": "The public key of the node at the start of the channel."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique identifier of the channel."
        },
        "fee_base_msat": {
          "type": "integer",
          "format": "int64",
          "description": "The base fee of the channel denominated in millisatoshis."
        },
        "fee_proportional_millionths": {
          "type": "integer",
          "format": "int64",
          "description": "The fee rate of the channel for sending one satoshi across it denominated in\nmillionths of a satoshi."
        },
        "cltv_expiry_delta": {
          "type": "integer",
          "format": "int64",
          "description": "The time-lock delta of the channel."
        }
      }
    },
    "lnrpcInitiator": {
      "type": "string",
      "enum": [
        "INITIATOR_UNKNOWN",
        "INITIATOR_LOCAL",
        "INITIATOR_REMOTE",
        "INITIATOR_BOTH"
      ],
      "default": "INITIATOR_UNKNOWN"
    },
    "lnrpcInterceptFeedback": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "The error to return to the user. If this is non-empty, the incoming gRPC\nstream/request is aborted and the error is returned to the gRPC client. If\nthis value is empty, it means the middleware accepts the stream/request/\nresponse and the processing of it can continue."
        },
        "replace_response": {
          "type": "boolean",
          "description": "A boolean indicating that the gRPC response should be replaced/overwritten.\nAs its name suggests, this can only be used as a feedback to an intercepted\nresponse RPC message and is ignored for feedback on any other message. This\nboolean is needed because in protobuf an empty message is serialized as a\n0-length or nil byte slice and we wouldn't be able to distinguish between\nan empty replacement message and the \"don't replace anything\" case."
        },
        "replacement_serialized": {
          "type": "string",
          "format": "byte",
          "description": "If the replace_response field is set to true, this field must contain the\nbinary serialized gRPC response message in the protobuf format."
        }
      }
    },
    "lnrpcInvoice": {
      "type": "object",
      "properties": {
        "memo": {
          "type": "string",
          "description": "An optional memo to attach along with the invoice. Used for record keeping\npurposes for the invoice's creator, and will also be set in the description\nfield of the encoded payment request if the description_hash field is not\nbeing used."
        },
        "r_preimage": {
          "type": "string",
          "format": "byte",
          "description": "The hex-encoded preimage (32 byte) which will allow settling an incoming\nHTLC payable to this preimage. When using REST, this field must be encoded\nas base64."
        },
        "r_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the preimage. When using REST, this field must be encoded as\nbase64."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "The value of this invoice in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "The value of this invoice in millisatoshis"
        },
        "settled": {
          "type": "boolean",
          "title": "Whether this invoice has been fulfilled"
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "When this invoice was created"
        },
        "settle_date": {
          "type": "string",
          "format": "int64",
          "title": "When this invoice was settled"
        },
        "payment_request": {
          "type": "string",
          "description": "A bare-bones invoice for a payment within the Lightning Network. With the\ndetails of the invoice, the sender has all the data necessary to send a\npayment to the recipient."
        },
        "description_hash": {
          "type": "string",
          "format": "byte",
          "description": "Hash (SHA-256) of a description of the payment. Used if the description of\npayment (memo) is too long to naturally fit within the description field\nof an encoded payment request. When using REST, this field must be encoded\nas base64."
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "description": "Payment request expiry time in seconds. Default is 3600 (1 hour)."
        },
        "fallback_addr": {
          "type": "string",
          "description": "Fallback on-chain address."
        },
        "cltv_expiry": {
          "type": "string",
          "format": "uint64",
          "description": "Delta to use for the time-lock of the CLTV extended to the final hop."
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          },
          "description": "Route hints that can each be individually used to assist in reaching the\ninvoice's destination."
        },
        "private": {
          "type": "boolean",
          "description": "Whether this invoice should include routing hints for private channels."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"add\" index of this invoice. Each newly created invoice will increment\nthis index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all added\ninvoices with an add_index greater than this one."
        },
        "settle_index": {
          "type": "string",
          "format": "uint64",
          "description": "The \"settle\" index of this invoice. Each newly settled invoice will\nincrement this index making it monotonically increasing. Callers to the\nSubscribeInvoices call can use this to instantly get notified of all\nsettled invoices with an settle_index greater than this one."
        },
        "amt_paid": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use amt_paid_sat or amt_paid_msat."
        },
        "amt_paid_sat": {
          "type": "string",
          "format": "int64",
          "description": "The amount that was accepted for this invoice, in satoshis. This will ONLY\nbe set if this invoice has been settled. We provide this field as if the\ninvoice was created with a zero value, then we need to record what amount\nwas ultimately accepted. Additionally, it's possible that the sender paid\nMORE that was specified in the original invoice. So we'll record that here\nas well."
        },
        "amt_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "The amount that was accepted for this invoice, in millisatoshis. This will\nONLY be set if this invoice has been settled. We provide this field as if\nthe invoice was created with a zero value, then we need to record what\namount was ultimately accepted. Additionally, it's possible that the sender\npaid MORE that was specified in the original invoice. So we'll record that\nhere as well."
        },
        "state": {
          "$ref": "#/definitions/InvoiceInvoiceState",
          "description": "The state the invoice is in."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoiceHTLC"
          },
          "description": "List of HTLCs paying to this invoice [EXPERIMENTAL]."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "List of features advertised on the invoice."
        },
        "is_keysend": {
          "type": "boolean",
          "description": "Indicates if this invoice was a spontaneous payment that arrived via keysend\n[EXPERIMENTAL]."
        },
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "The payment address of this invoice. This value will be used in MPP\npayments, and also for newer invoies that always require the MPP paylaod\nfor added end-to-end security."
        },
        "is_amp": {
          "type": "boolean",
          "description": "Signals whether or not this is an AMP invoice."
        }
      }
    },
    "lnrpcInvoiceHTLC": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "Short channel id over which the htlc was received."
        },
        "htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "Index identifying the htlc on the channel."
        },
        "amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of the htlc in msat."
        },
        "accept_height": {
          "type": "integer",
          "format": "int32",
          "description": "Block height at which this htlc was accepted."
        },
        "accept_time": {
          "type": "string",
          "format": "int64",
          "description": "Time at which this htlc was accepted."
        },
        "resolve_time": {
          "type": "string",
          "format": "int64",
          "description": "Time at which this htlc was settled or canceled."
        },
        "expiry_height": {
          "type": "integer",
          "format": "int32",
          "description": "Block height at which this htlc expires."
        },
        "state": {
          "$ref": "#/definitions/lnrpcInvoiceHTLCState",
          "description": "Current state the htlc is in."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "Custom tlv records."
        },
        "mpp_total_amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of the mpp payment in msat."
        },
        "amp": {
          "$ref": "#/definitions/lnrpcAMP",
          "description": "Details relevant to AMP HTLCs, only populated if this is an AMP HTLC."
        }
      },
      "title": "Details of an HTLC that paid to an invoice"
    },
    "lnrpcInvoiceHTLCState": {
      "type": "string",
      "enum": [
        "ACCEPTED",
        "SETTLED",
        "CANCELED"
      ],
      "default": "ACCEPTED"
    },
    "lnrpcKeyDescriptor": {
      "type": "object",
      "properties": {
        "raw_key_bytes": {
          "type": "string",
          "format": "byte",
          "description": "The raw bytes of the key being identified."
        },
        "key_loc": {
          "$ref": "#/definitions/lnrpcKeyLocator",
          "description": "The key locator that identifies which key to use for signing."
        }
      }
    },
    "lnrpcKeyLocator": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int32",
          "description": "The family of key being identified."
        },
        "key_index": {
          "type": "integer",
          "format": "int32",
          "description": "The precise index of the key being identified."
        }
      }
    },
    "lnrpcLightningAddress": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "title": "The identity pubkey of the Lightning node"
        },
        "host": {
          "type": "string",
          "title": "The network location of the lightning node, e.g. `69.69.69.69:1337` or\n`localhost:10011`"
        }
      }
    },
    "lnrpcLightningNode": {
      "type": "object",
      "properties": {
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "pub_key": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeAddress"
          }
        },
        "color": {
          "type": "string"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      },
      "description": "An individual vertex/node within the channel graph. A node is\nconnected to other nodes by one or more channel edges emanating from it. As the\ngraph is directed, a node will also have an incoming edge attached to it for\neach outgoing edge."
    },
    "lnrpcListChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannel"
          },
          "title": "The list of active channels"
        }
      }
    },
    "lnrpcListInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoice"
          },
          "description": "A list of invoices from the time slice of the time series specified in the\nrequest."
        },
        "last_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned invoices. This can be used\nto seek further, pagination style."
        },
        "first_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned invoices. This can be used\nto seek backwards, pagination style."
        }
      }
    },
    "lnrpcListMacaroonIDsResponse": {
      "type": "object",
      "properties": {
        "root_key_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The list of root key IDs that are in use."
        }
      }
    },
    "lnrpcListPaymentsResponse": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPayment"
          },
          "title": "The list of payments"
        },
        "first_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the first item in the set of returned payments. This can be\nused as the index_offset to continue seeking backwards in the next request."
        },
        "last_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the last item in the set of returned payments. This can be used\nas the index_offset to continue seeking forwards in the next request."
        }
      }
    },
    "lnrpcListPeersResponse": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPeer"
          },
          "title": "The list of currently connected peers"
        }
      }
    },
    "lnrpcListPermissionsResponse": {
      "type": "object",
      "properties": {
        "method_permissions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcMacaroonPermissionList"
          },
          "description": "A map between all RPC method URIs and their required macaroon permissions to\naccess them."
        }
      }
    },
    "lnrpcListUnspentResponse": {
      "type": "object",
      "properties": {
        "utxos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcUtxo"
          },
          "title": "A list of utxos"
        }
      }
    },
    "lnrpcMPPRecord": {
      "type": "object",
      "properties": {
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "A unique, random identifier used to authenticate the sender as the intended\npayer of a multi-path payment. The payment_addr must be the same for all\nsubpayments, and match the payment_addr provided in the receiver's invoice.\nThe same payment_addr must be used on all subpayments."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total amount in milli-satoshis being sent as part of a larger multi-path\npayment. The caller is responsible for ensuring subpayments to the same node\nand payment_hash sum exactly to total_amt_msat. The same\ntotal_amt_msat must be used on all subpayments."
        }
      }
    },
    "lnrpcMacaroonPermission": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "The entity a permission grants access to."
        },
        "action": {
          "type": "string",
          "description": "The action that is granted."
        }
      }
    },
    "lnrpcMacaroonPermissionList": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcMacaroonPermission"
          },
          "description": "A list of macaroon permissions."
        }
      }
    },
    "lnrpcMiddlewareRegistration": {
      "type": "object",
      "properties": {
        "middleware_name": {
          "type": "string",
          "description": "The name of the middleware to register. The name should be as informative\nas possible and is logged on registration."
        },
        "custom_macaroon_caveat_name": {
          "type": "string",
          "description": "The name of the custom macaroon caveat that this middleware is responsible\nfor. Only requests/responses that contain a macaroon with the registered\ncustom caveat are forwarded for interception to the middleware. The\nexception being the read-only mode: All requests/responses are forwarded to\na middleware that requests read-only access but such a middleware won't be\nallowed to _alter_ responses. As a security measure, _no_ middleware can\nchange responses to requests made with _unencumbered_ macaroons!\nNOTE: Cannot be used at the same time as read_only_mode."
        },
        "read_only_mode": {
          "type": "boolean",
          "description": "Instead of defining a custom macaroon caveat name a middleware can register\nitself for read-only access only. In that mode all requests/responses are\nforwarded to the middleware but the middleware isn't allowed to alter any of\nthe responses.\nNOTE: Cannot be used at the same time as custom_macaroon_caveat_name."
        }
      }
    },
    "lnrpcMultiChanBackup": {
      "type": "object",
      "properties": {
        "chan_points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelPoint"
          },
          "description": "Is the set of all channels that are included in this multi-channel backup."
        },
        "multi_chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "A single encrypted blob containing all the static channel backups of the\nchannel listed above. This can be stored as a single file or blob, and\nsafely be replaced with any prior/future versions. When using REST, this\nfield must be encoded as base64."
        }
      }
    },
    "lnrpcNetworkInfo": {
      "type": "object",
      "properties": {
        "graph_diameter": {
          "type": "integer",
          "format": "int64"
        },
        "avg_out_degree": {
          "type": "number",
          "format": "double"
        },
        "max_out_degree": {
          "type": "integer",
          "format": "int64"
        },
        "num_nodes": {
          "type": "integer",
          "format": "int64"
        },
        "num_channels": {
          "type": "integer",
          "format": "int64"
        },
        "total_network_capacity": {
          "type": "string",
          "format": "int64"
        },
        "avg_channel_size": {
          "type": "number",
          "format": "double"
        },
        "min_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "max_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "median_channel_size_sat": {
          "type": "string",
          "format": "int64"
        },
        "num_zombie_chans": {
          "type": "string",
          "format": "uint64",
          "description": "The number of edges marked as zombies."
        }
      }
    },
    "lnrpcNewAddressResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "The newly generated wallet address"
        }
      }
    },
    "lnrpcNodeAddress": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addr": {
          "type": "string"
        }
      }
    },
    "lnrpcNodeInfo": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/lnrpcLightningNode",
          "description": "An individual vertex/node within the channel graph. A node is\nconnected to other nodes by one or more channel edges emanating from it. As\nthe graph is directed, a node will also have an incoming edge attached to\nit for each outgoing edge."
        },
        "num_channels": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of channels for the node."
        },
        "total_capacity": {
          "type": "string",
          "format": "int64",
          "description": "The sum of all channels capacity for the node, denominated in satoshis."
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "description": "A list of all public channels for the node."
        }
      }
    },
    "lnrpcNodeMetricType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "BETWEENNESS_CENTRALITY"
      ],
      "default": "UNKNOWN"
    },
    "lnrpcNodeMetricsResponse": {
      "type": "object",
      "properties": {
        "betweenness_centrality": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFloatMetric"
          },
          "description": "Betweenness centrality is the sum of the ratio of shortest paths that pass\nthrough the node for each pair of nodes in the graph (not counting paths\nstarting or ending at this node).\nMap of node pubkey to betweenness centrality of the node. Normalized\nvalues are in the [0,1] closed interval."
        }
      }
    },
    "lnrpcNodePair": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "byte",
          "description": "The sending node of the pair. When using REST, this field must be encoded as\nbase64."
        },
        "to": {
          "type": "string",
          "format": "byte",
          "description": "The receiving node of the pair. When using REST, this field must be encoded\nas base64."
        }
      }
    },
    "lnrpcNodeUpdate": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Deprecated, use node_addresses."
        },
        "identity_key": {
          "type": "string"
        },
        "global_features": {
          "type": "string",
          "format": "byte",
          "description": "Deprecated, use features."
        },
        "alias": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "node_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeAddress"
          }
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features that the node has advertised in the init message, node\nannouncements and invoices."
        }
      }
    },
    "lnrpcOpenChannelRequest": {
      "type": "object",
      "properties": {
        "sat_per_vbyte": {
          "type": "string",
          "format": "uint64",
          "description": "A manual fee rate set in sat/vbyte that should be used when crafting the\nfunding transaction."
        },
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey of the node to open a channel with. When using REST, this field\nmust be encoded as base64."
        },
        "node_pubkey_string": {
          "type": "string",
          "description": "The hex encoded pubkey of the node to open a channel with. Deprecated now\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "local_funding_amount": {
          "type": "string",
          "format": "int64",
          "title": "The number of satoshis the wallet should commit to the channel"
        },
        "push_sat": {
          "type": "string",
          "format": "int64",
          "title": "The number of satoshis to push to the remote side as part of the initial\ncommitment state"
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "The target number of blocks that the funding transaction should be\nconfirmed by."
        },
        "sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use sat_per_vbyte.\nA manual fee rate set in sat/vbyte that should be used when crafting the\nfunding transaction."
        },
        "private": {
          "type": "boolean",
          "description": "Whether this channel should be private, not announced to the greater\nnetwork."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "int64",
          "description": "The minimum value in millisatoshi we will require for incoming HTLCs on\nthe channel."
        },
        "remote_csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "The delay we require on the remote's commitment transaction. If this is\nnot set, it will be scaled automatically with the channel size."
        },
        "min_confs": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of confirmations each one of your outputs used for\nthe funding transaction must satisfy."
        },
        "spend_unconfirmed": {
          "type": "boolean",
          "description": "Whether unconfirmed outputs should be used as inputs for the funding\ntransaction."
        },
        "close_address": {
          "type": "string",
          "description": "Close address is an optional address which specifies the address to which\nfunds should be paid out to upon cooperative close. This field may only be\nset if the peer supports the option upfront feature bit (call listpeers\nto check). The remote peer will only accept cooperative closes to this\naddress if it is set.\n\nNote: If this value is set on channel creation, you will *not* be able to\ncooperatively close out to a different address."
        },
        "funding_shim": {
          "$ref": "#/definitions/lnrpcFundingShim",
          "description": "Funding shims are an optional argument that allow the caller to intercept\ncertain funding functionality. For example, a shim can be provided to use a\nparticular key for the commitment key (ideally cold) rather than use one\nthat is generated by the wallet as normal, or signal that signing will be\ncarried out in an interactive manner (PSBT based)."
        },
        "remote_max_value_in_flight_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of coins in millisatoshi that can be pending within\nthe channel. It only applies to the remote party."
        },
        "remote_max_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of concurrent HTLCs we will allow the remote party to add\nto the commitment transaction."
        },
        "max_local_csv": {
          "type": "integer",
          "format": "int64",
          "description": "Max local csv is the maximum csv delay we will allow for our own commitment\ntransaction."
        },
        "commitment_type": {
          "$ref": "#/definitions/lnrpcCommitmentType",
          "description": "The explicit commitment type to use. Note this field will only be used if\nthe remote peer supports explicit channel negotiation."
        }
      }
    },
    "lnrpcOpenStatusUpdate": {
      "type": "object",
      "properties": {
        "chan_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate",
          "description": "Signals that the channel is now fully negotiated and the funding\ntransaction published."
        },
        "chan_open": {
          "$ref": "#/definitions/lnrpcChannelOpenUpdate",
          "description": "Signals that the channel's funding transaction has now reached the\nrequired number of confirmations on chain and can be used."
        },
        "psbt_fund": {
          "$ref": "#/definitions/lnrpcReadyForPsbtFunding",
          "description": "Signals that the funding process has been suspended and the construction\nof a PSBT that funds the channel PK script is now required."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "The pending channel ID of the created channel. This value may be used to\nfurther the funding flow manually via the FundingStateStep method."
        }
      }
    },
    "lnrpcOutPoint": {
      "type": "object",
      "properties": {
        "txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "Raw bytes representing the transaction id."
        },
        "txid_str": {
          "type": "string",
          "description": "Reversed, hex-encoded string representing the transaction id."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the output on the transaction."
        }
      }
    },
    "lnrpcPayReq": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "payment_hash": {
          "type": "string"
        },
        "num_satoshis": {
          "type": "string",
          "format": "int64"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "description_hash": {
          "type": "string"
        },
        "fallback_addr": {
          "type": "string"
        },
        "cltv_expiry": {
          "type": "string",
          "format": "int64"
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          }
        },
        "payment_addr": {
          "type": "string",
          "format": "byte"
        },
        "num_msat": {
          "type": "string",
          "format": "int64"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      }
    },
    "lnrpcPayment": {
      "type": "object",
      "properties": {
        "payment_hash": {
          "type": "string",
          "title": "The payment hash"
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use value_sat or value_msat."
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "Deprecated, use creation_time_ns"
        },
        "fee": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use fee_sat or fee_msat."
        },
        "payment_preimage": {
          "type": "string",
          "title": "The payment preimage"
        },
        "value_sat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the payment in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the payment in milli-satoshis"
        },
        "payment_request": {
          "type": "string",
          "description": "The optional payment request being fulfilled."
        },
        "status": {
          "$ref": "#/definitions/PaymentPaymentStatus",
          "description": "The status of the payment."
        },
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "title": "The fee paid for this payment in satoshis"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64",
          "title": "The fee paid for this payment in milli-satoshis"
        },
        "creation_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "The time in UNIX nanoseconds at which the payment was created."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLCAttempt"
          },
          "description": "The HTLCs made in attempt to settle the payment."
        },
        "payment_index": {
          "type": "string",
          "format": "uint64",
          "description": "The creation index of this payment. Each payment can be uniquely identified\nby this index, which may not strictly increment by 1 for payments made in\nolder versions of lnd."
        },
        "failure_reason": {
          "$ref": "#/definitions/lnrpcPaymentFailureReason"
        }
      }
    },
    "lnrpcPaymentFailureReason": {
      "type": "string",
      "enum": [
        "FAILURE_REASON_NONE",
        "FAILURE_REASON_TIMEOUT",
        "FAILURE_REASON_NO_ROUTE",
        "FAILURE_REASON_ERROR",
        "FAILURE_REASON_INCORRECT_PAYMENT_DETAILS",
        "FAILURE_REASON_INSUFFICIENT_BALANCE"
      ],
      "default": "FAILURE_REASON_NONE",
      "description": " - FAILURE_REASON_NONE: Payment isn't failed (yet).\n - FAILURE_REASON_TIMEOUT: There are more routes to try, but the payment timeout was exceeded.\n - FAILURE_REASON_NO_ROUTE: All possible routes were tried and failed permanently. Or were no\nroutes to the destination at all.\n - FAILURE_REASON_ERROR: A non-recoverable error has occured.\n - FAILURE_REASON_INCORRECT_PAYMENT_DETAILS: Payment details incorrect (unknown hash, invalid amt or\ninvalid final cltv delta)\n - FAILURE_REASON_INSUFFICIENT_BALANCE: Insufficient local balance."
    },
    "lnrpcPeer": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "title": "The identity pubkey of the peer"
        },
        "address": {
          "type": "string",
          "title": "Network address of the peer; eg `127.0.0.1:10011`"
        },
        "bytes_sent": {
          "type": "string",
          "format": "uint64",
          "title": "Bytes of data transmitted to this peer"
        },
        "bytes_recv": {
          "type": "string",
          "format": "uint64",
          "title": "Bytes of data transmitted from this peer"
        },
        "sat_sent": {
          "type": "string",
          "format": "int64",
          "title": "Satoshis sent to this peer"
        },
        "sat_recv": {
          "type": "string",
          "format": "int64",
          "title": "Satoshis received from this peer"
        },
        "inbound": {
          "type": "boolean",
          "title": "A channel is inbound if the counterparty initiated the channel"
        },
        "ping_time": {
          "type": "string",
          "format": "int64",
          "title": "Ping time to this peer"
        },
        "sync_type": {
          "$ref": "#/definitions/PeerSyncType",
          "description": "The type of sync we are currently performing with this peer."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features advertised by the remote peer in their init message."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcTimestampedError"
          },
          "description": "The latest errors received from our peer with timestamps, limited to the 10\nmost recent errors. These errors are tracked across peer connections, but\nare not persisted across lnd restarts. Note that these errors are only\nstored for peers that we have channels open with, to prevent peers from\nspamming us with errors at no cost."
        },
        "flap_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times we have recorded this peer going offline or coming\nonline, recorded across restarts. Note that this value is decreased over\ntime if the peer has not recently flapped, so that we can forgive peers\nwith historically high flap counts."
        },
        "last_flap_ns": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp of the last flap we observed for this peer. If this value is\nzero, we have not observed any flaps for this peer."
        },
        "last_ping_payload": {
          "type": "string",
          "format": "byte",
          "description": "The last ping payload the peer has sent to us."
        }
      }
    },
    "lnrpcPeerEvent": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "description": "The identity pubkey of the peer."
        },
        "type": {
          "$ref": "#/definitions/PeerEventEventType"
        }
      }
    },
    "lnrpcPendingChannelsResponse": {
      "type": "object",
      "properties": {
        "total_limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance in satoshis encumbered in pending channels"
        },
        "pending_open_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponsePendingOpenChannel"
          },
          "title": "Channels pending opening"
        },
        "pending_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseClosedChannel"
          },
          "description": "Deprecated: Channels pending closing previously contained cooperatively\nclosed channels with a single confirmation. These channels are now\nconsidered closed from the time we see them on chain."
        },
        "pending_force_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseForceClosedChannel"
          },
          "title": "Channels pending force closing"
        },
        "waiting_close_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseWaitingCloseChannel"
          },
          "title": "Channels waiting for closing tx to confirm"
        }
      }
    },
    "lnrpcPendingHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean",
          "title": "The direction within the channel that the htlc was sent"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The total value of the htlc"
        },
        "outpoint": {
          "type": "string",
          "title": "The final output to be swept back to the user's wallet"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "The next block height at which we can spend the current stage"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks remaining until the current stage can be swept.\nNegative values indicate how many blocks have passed since becoming\nmature."
        },
        "stage": {
          "type": "integer",
          "format": "int64",
          "title": "Indicates whether the htlc is in its first or second stage of recovery"
        }
      }
    },
    "lnrpcPendingUpdate": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "format": "byte"
        },
        "output_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcPolicyUpdateRequest": {
      "type": "object",
      "properties": {
        "global": {
          "type": "boolean",
          "description": "If set, then this update applies to all currently active channels."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "If set, this update will target a specific channel."
        },
        "base_fee_msat": {
          "type": "string",
          "format": "int64",
          "description": "The base fee charged regardless of the number of milli-satoshis sent."
        },
        "fee_rate": {
          "type": "number",
          "format": "double",
          "description": "The effective fee rate in milli-satoshis. The precision of this value\ngoes up to 6 decimal places, so 1e-6."
        },
        "time_lock_delta": {
          "type": "integer",
          "format": "int64",
          "description": "The required timelock delta for HTLCs forwarded over the channel."
        },
        "max_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "If set, the maximum HTLC size in milli-satoshis. If unset, the maximum\nHTLC will be unchanged."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "The minimum HTLC size in milli-satoshis. Only applied if\nmin_htlc_msat_specified is true."
        },
        "min_htlc_msat_specified": {
          "type": "boolean",
          "description": "If true, min_htlc_msat is applied."
        }
      }
    },
    "lnrpcPolicyUpdateResponse": {
      "type": "object",
      "properties": {
        "failed_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcFailedUpdate"
          },
          "description": "List of failed policy updates."
        }
      }
    },
    "lnrpcPsbtShim": {
      "type": "object",
      "properties": {
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier of 32 random bytes that will be used as the pending\nchannel ID to identify the PSBT state machine when interacting with it and\non the wire protocol to initiate the funding request."
        },
        "base_psbt": {
          "type": "string",
          "format": "byte",
          "description": "An optional base PSBT the new channel output will be added to. If this is\nnon-empty, it must be a binary serialized PSBT."
        },
        "no_publish": {
          "type": "boolean",
          "description": "If a channel should be part of a batch (multiple channel openings in one\ntransaction), it can be dangerous if the whole batch transaction is\npublished too early before all channel opening negotiations are completed.\nThis flag prevents this particular channel from broadcasting the transaction\nafter the negotiation with the remote peer. In a batch of channel openings\nthis flag should be set to true for every channel but the very last."
        }
      }
    },
    "lnrpcQueryRoutesResponse": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRoute"
          },
          "description": "The route that results from the path finding operation. This is still a\nrepeated field to retain backwards compatibility."
        },
        "success_prob": {
          "type": "number",
          "format": "double",
          "title": "The success probability of the returned route based on the current mission\ncontrol state. [EXPERIMENTAL]"
        }
      }
    },
    "lnrpcRPCMessage": {
      "type": "object",
      "properties": {
        "method_full_uri": {
          "type": "string",
          "description": "The full URI (in the format /\u003crpcpackage\u003e.\u003cServiceName\u003e/MethodName, for\nexample /lnrpc.Lightning/GetInfo) of the RPC method the message was sent\nto/from."
        },
        "stream_rpc": {
          "type": "boolean",
          "description": "Indicates whether the message was sent over a streaming RPC method or not."
        },
        "type_name": {
          "type": "string",
          "description": "The full canonical gRPC name of the message type (in the format\n\u003crpcpackage\u003e.TypeName, for example lnrpc.GetInfoRequest)."
        },
        "serialized": {
          "type": "string",
          "format": "byte",
          "description": "The full content of the gRPC message, serialized in the binary protobuf\nformat."
        }
      }
    },
    "lnrpcRPCMiddlewareRequest": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique ID of the intercepted request. Useful for mapping request to\nresponse when implementing full duplex message interception."
        },
        "raw_macaroon": {
          "type": "string",
          "format": "byte",
          "description": "The raw bytes of the complete macaroon as sent by the gRPC client in the\noriginal request. This might be empty for a request that doesn't require\nmacaroons such as the wallet unlocker RPCs."
        },
        "custom_caveat_condition": {
          "type": "string",
          "title": "The parsed condition of the macaroon's custom caveat for convenient access.\nThis field only contains the value of the custom caveat that the handling\nmiddleware has registered itself for. The condition _must_ be validated for\nmessages of intercept_type stream_auth and request!"
        },
        "stream_auth": {
          "$ref": "#/definitions/lnrpcStreamAuth",
          "description": "Intercept stream authentication: each new streaming RPC call that is\ninitiated against lnd and contains the middleware's custom macaroon\ncaveat can be approved or denied based upon the macaroon in the stream\nheader. This message will only be sent for streaming RPCs, unary RPCs\nmust handle the macaroon authentication in the request interception to\navoid an additional message round trip between lnd and the middleware."
        },
        "request": {
          "$ref": "#/definitions/lnrpcRPCMessage",
          "description": "Intercept incoming gRPC client request message: all incoming messages,\nboth on streaming and unary RPCs, are forwarded to the middleware for\ninspection. For unary RPC messages the middleware is also expected to\nvalidate the custom macaroon caveat of the request."
        },
        "response": {
          "$ref": "#/definitions/lnrpcRPCMessage",
          "description": "Intercept outgoing gRPC response message: all outgoing messages, both on\nstreaming and unary RPCs, are forwarded to the middleware for inspection\nand amendment. The response in this message is the original response as\nit was generated by the main RPC server. It can either be accepted\n(=forwarded to the client), replaced/overwritten with a new message of\nthe same type, or replaced by an error message."
        }
      }
    },
    "lnrpcRPCMiddlewareResponse": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "format": "uint64",
          "description": "The unique ID of the intercepted request that this response refers to. Must\nalways be set when giving feedback to an intercept but is ignored for the\ninitial registration message."
        },
        "register": {
          "$ref": "#/definitions/lnrpcMiddlewareRegistration",
          "title": "The registration message identifies the middleware that's being\nregistered in lnd. The registration message must be sent immediately\nafter initiating the RegisterRpcMiddleware stream, otherwise lnd will\ntime out the attempt and terminate the request. NOTE: The middleware\nwill only receive interception messages for requests that contain a\nmacaroon with the custom caveat that the middleware declares it is\nresponsible for handling in the registration message! As a security\nmeasure, _no_ middleware can intercept requests made with _unencumbered_\nmacaroons!"
        },
        "feedback": {
          "$ref": "#/definitions/lnrpcInterceptFeedback",
          "description": "The middleware received an interception request and gives feedback to\nit. The request_id indicates what message the feedback refers to."
        }
      }
    },
    "lnrpcReadyForPsbtFunding": {
      "type": "object",
      "properties": {
        "funding_address": {
          "type": "string",
          "description": "The P2WSH address of the channel funding multisig address that the below\nspecified amount in satoshis needs to be sent to."
        },
        "funding_amount": {
          "type": "string",
          "format": "int64",
          "description": "The exact amount in satoshis that needs to be sent to the above address to\nfund the pending channel."
        },
        "psbt": {
          "type": "string",
          "format": "byte",
          "description": "A raw PSBT that contains the pending channel output. If a base PSBT was\nprovided in the PsbtShim, this is the base PSBT with one additional output.\nIf no base PSBT was specified, this is an otherwise empty PSBT with exactly\none output."
        }
      }
    },
    "lnrpcResolution": {
      "type": "object",
      "properties": {
        "resolution_type": {
          "$ref": "#/definitions/lnrpcResolutionType",
          "description": "The type of output we are resolving."
        },
        "outcome": {
          "$ref": "#/definitions/lnrpcResolutionOutcome",
          "description": "The outcome of our on chain action that resolved the outpoint."
        },
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "description": "The outpoint that was spent by the resolution."
        },
        "amount_sat": {
          "type": "string",
          "format": "uint64",
          "description": "The amount that was claimed by the resolution."
        },
        "sweep_txid": {
          "type": "string",
          "description": "The hex-encoded transaction ID of the sweep transaction that spent the\noutput."
        }
      }
    },
    "lnrpcResolutionOutcome": {
      "type": "string",
      "enum": [
        "OUTCOME_UNKNOWN",
        "CLAIMED",
        "UNCLAIMED",
        "ABANDONED",
        "FIRST_STAGE",
        "TIMEOUT"
      ],
      "default": "OUTCOME_UNKNOWN",
      "description": " - OUTCOME_UNKNOWN: Outcome unknown.\n - CLAIMED: An output was claimed on chain.\n - UNCLAIMED: An output was left unclaimed on chain.\n - ABANDONED: ResolverOutcomeAbandoned indicates that an output that we did not\nclaim on chain, for example an anchor that we did not sweep and a\nthird party claimed on chain, or a htlc that we could not decode\nso left unclaimed.\n - FIRST_STAGE: If we force closed our channel, our htlcs need to be claimed in two\nstages. This outcome represents the broadcast of a timeout or success\ntransaction for this two stage htlc claim.\n - TIMEOUT: A htlc was timed out on chain."
    },
    "lnrpcResolutionType": {
      "type": "string",
      "enum": [
        "TYPE_UNKNOWN",
        "ANCHOR",
        "INCOMING_HTLC",
        "OUTGOING_HTLC",
        "COMMIT"
      ],
      "default": "TYPE_UNKNOWN",
      "description": " - ANCHOR: We resolved an anchor output.\n - INCOMING_HTLC: We are resolving an incoming htlc on chain. This if this htlc is\nclaimed, we swept the incoming htlc with the preimage. If it is timed\nout, our peer swept the timeout path.\n - OUTGOING_HTLC: We are resolving an outgoing htlc on chain. If this htlc is claimed,\nthe remote party swept the htlc with the preimage. If it is timed out,\nwe swept it with the timeout path.\n - COMMIT: We force closed and need to sweep our time locked commitment output."
    },
    "lnrpcRestoreBackupResponse": {
      "type": "object"
    },
    "lnrpcRestoreChanBackupRequest": {
      "type": "object",
      "properties": {
        "chan_backups": {
          "$ref": "#/definitions/lnrpcChannelBackups",
          "description": "The channels to restore as a list of channel/backup pairs."
        },
        "multi_chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "The channels to restore in the packed multi backup format. When using\nREST, this field must be encoded as base64."
        }
      }
    },
    "lnrpcRoute": {
      "type": "object",
      "properties": {
        "total_time_lock": {
          "type": "integer",
          "format": "int64",
          "description": "The cumulative (final) time lock across the entire route. This is the CLTV\nvalue that should be extended to the first hop in the route. All other hops\nwill decrement the time-lock as advertised, leaving enough time for all\nhops to wait for or present the payment preimage to complete the payment."
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "description": "The sum of the fees paid at each hop within the final route. In the case\nof a one-hop payment, this value will be zero as we don't need to pay a fee\nto ourselves."
        },
        "total_amt": {
          "type": "string",
          "format": "int64",
          "description": "The total amount of funds required to complete a payment over this route.\nThis value includes the cumulative fees at each hop. As a result, the HTLC\nextended to the first-hop in the route will need to have at least this many\nsatoshis, otherwise the route will fail at an intermediate node due to an\ninsufficient amount of fees."
        },
        "hops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHop"
          },
          "description": "Contains details concerning the specific forwarding details at each hop."
        },
        "total_fees_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total fees in millisatoshis."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "The total amount in millisatoshis."
        }
      },
      "description": "A path through the channel graph which runs over one or more channels in\nsuccession. This struct carries all the information required to craft the\nSphinx onion packet, and send the payment along the first hop in the path. A\nroute is only selected as valid if all the channels have sufficient capacity to\ncarry the initial payment amount after fees are accounted for."
    },
    "lnrpcRouteHint": {
      "type": "object",
      "properties": {
        "hop_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHopHint"
          },
          "description": "A list of hop hints that when chained together can assist in reaching a\nspecific destination."
        }
      }
    },
    "lnrpcRoutingPolicy": {
      "type": "object",
      "properties": {
        "time_lock_delta": {
          "type": "integer",
          "format": "int64"
        },
        "min_htlc": {
          "type": "string",
          "format": "int64"
        },
        "fee_base_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_rate_milli_msat": {
          "type": "string",
          "format": "int64"
        },
        "disabled": {
          "type": "boolean"
        },
        "max_htlc_msat": {
          "type": "string",
          "format": "uint64"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcSendCoinsRequest": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string",
          "title": "The address to send coins to"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The amount in satoshis to send"
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "The target number of blocks that this transaction should be confirmed\nby."
        },
        "sat_per_vbyte": {
          "type": "string",
          "format": "uint64",
          "description": "A manual fee rate set in sat/vbyte that should be used when crafting the\ntransaction."
        },
        "sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use sat_per_vbyte.\nA manual fee rate set in sat/vbyte that should be used when crafting the\ntransaction."
        },
        "send_all": {
          "type": "boolean",
          "description": "If set, then the amount field will be ignored, and lnd will attempt to\nsend all the coins under control of the internal wallet to the specified\naddress."
        },
        "label": {
          "type": "string",
          "description": "An optional label for the transaction, limited to 500 characters."
        },
        "min_confs": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of confirmations each one of your outputs used for\nthe transaction must satisfy."
        },
        "spend_unconfirmed": {
          "type": "boolean",
          "description": "Whether unconfirmed outputs should be used as inputs for the transaction."
        }
      }
    },
    "lnrpcSendCoinsResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "The transaction ID of the transaction"
        }
      }
    },
    "lnrpcSendManyRequest": {
      "type": "object",
      "properties": {
        "AddrToAmount": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "title": "The map from addresses to amounts"
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "The target number of blocks that this transaction should be confirmed\nby."
        },
        "sat_per_vbyte": {
          "type": "string",
          "format": "uint64",
          "description": "A manual fee rate set in sat/vbyte that should be used when crafting the\ntransaction."
        },
        "sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "Deprecated, use sat_per_vbyte.\nA manual fee rate set in sat/vbyte that should be used when crafting the\ntransaction."
        },
        "label": {
          "type": "string",
          "description": "An optional label for the transaction, limited to 500 characters."
        },
        "min_confs": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of confirmations each one of your outputs used for\nthe transaction must satisfy."
        },
        "spend_unconfirmed": {
          "type": "boolean",
          "description": "Whether unconfirmed outputs should be used as inputs for the transaction."
        }
      }
    },
    "lnrpcSendManyResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "The id of the transaction"
        }
      }
    },
    "lnrpcSendRequest": {
      "type": "object",
      "properties": {
        "dest": {
          "type": "string",
          "format": "byte",
          "description": "The identity pubkey of the payment recipient. When using REST, this field\nmust be encoded as base64."
        },
        "dest_string": {
          "type": "string",
          "description": "The hex-encoded identity pubkey of the payment recipient. Deprecated now\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "The amount to send expressed in satoshis.\n\nThe fields amt and amt_msat are mutually exclusive."
        },
        "amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "The amount to send expressed in millisatoshis.\n\nThe fields amt and amt_msat are mutually exclusive."
        },
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash to use within the payment's HTLC. When using REST, this field\nmust be encoded as base64."
        },
        "payment_hash_string": {
          "type": "string",
          "description": "The hex-encoded hash to use within the payment's HTLC. Deprecated now\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "payment_request": {
          "type": "string",
          "description": "A bare-bones invoice for a payment within the Lightning Network. With the\ndetails of the invoice, the sender has all the data necessary to send a\npayment to the recipient."
        },
        "final_cltv_delta": {
          "type": "integer",
          "format": "int32",
          "description": "The CLTV delta from the current height that should be used to set the\ntimelock for the final hop."
        },
        "fee_limit": {
          "$ref": "#/definitions/lnrpcFeeLimit",
          "description": "The maximum number of satoshis that will be paid as a fee of the payment.\nThis value can be represented either as a percentage of the amount being\nsent, or as a fixed amount of the maximum fee the user is willing the pay to\nsend the payment."
        },
        "outgoing_chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "The channel id of the channel that must be taken to the first hop. If zero,\nany channel may be used."
        },
        "last_hop_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey of the last hop of the route. If empty, any hop may be used."
        },
        "cltv_limit": {
          "type": "integer",
          "format": "int64",
          "description": "An optional maximum total time lock for the route. This should not exceed\nlnd's `--max-cltv-expiry` setting. If zero, then the value of\n`--max-cltv-expiry` is enforced."
        },
        "dest_custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "An optional field that can be used to pass an arbitrary set of TLV records\nto a peer which understands the new records. This can be used to pass\napplication specific data during the payment attempt. Record types are\nrequired to be in the custom range \u003e= 65536. When using REST, the values\nmust be encoded as base64."
        },
        "allow_self_payment": {
          "type": "boolean",
          "description": "If set, circular payments to self are permitted."
        },
        "dest_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcFeatureBit"
          },
          "description": "Features assumed to be supported by the final node. All transitive feature\ndependencies must also be set properly. For a given feature bit pair, either\noptional or remote may be set, but not both. If this field is nil or empty,\nthe router will try to load destination features from the graph as a\nfallback."
        },
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "The payment address of the generated invoice."
        }
      }
    },
    "lnrpcSendResponse": {
      "type": "object",
      "properties": {
        "payment_error": {
          "type": "string"
        },
        "payment_preimage": {
          "type": "string",
          "format": "byte"
        },
        "payment_route": {
          "$ref": "#/definitions/lnrpcRoute"
        },
        "payment_hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "lnrpcSendToRouteRequest": {
      "type": "object",
      "properties": {
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "The payment hash to use for the HTLC. When using REST, this field must be\nencoded as base64."
        },
        "payment_hash_string": {
          "type": "string",
          "description": "An optional hex-encoded payment hash to be used for the HTLC. Deprecated now\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "route": {
          "$ref": "#/definitions/lnrpcRoute",
          "description": "Route that should be used to attempt to complete the payment."
        }
      }
    },
    "lnrpcSignMessageRequest": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "format": "byte",
          "description": "The message to be signed. When using REST, this field must be encoded as\nbase64."
        }
      }
    },
    "lnrpcSignMessageResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "title": "The signature for the given message"
        }
      }
    },
    "lnrpcStopRequest": {
      "type": "object"
    },
    "lnrpcStopResponse": {
      "type": "object"
    },
    "lnrpcStreamAuth": {
      "type": "object",
      "properties": {
        "method_full_uri": {
          "type": "string",
          "description": "The full URI (in the format /\u003crpcpackage\u003e.\u003cServiceName\u003e/MethodName, for\nexample /lnrpc.Lightning/GetInfo) of the streaming RPC method that was just\nestablished."
        }
      }
    },
    "lnrpcTimestampedError": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "The unix timestamp in seconds when the error occurred."
        },
        "error": {
          "type": "string",
          "description": "The string representation of the error sent by our peer."
        }
      }
    },
    "lnrpcTransaction": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "type": "string",
          "title": "The transaction hash"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "The transaction amount, denominated in satoshis"
        },
        "num_confirmations": {
          "type": "integer",
          "format": "int32",
          "title": "The number of confirmations"
        },
        "block_hash": {
          "type": "string",
          "title": "The hash of the block this transaction was included in"
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "title": "The height of the block this transaction was included in"
        },
        "time_stamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of this transaction"
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "title": "Fees paid for this transaction"
        },
        "dest_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Addresses that received funds for this transaction"
        },
        "raw_tx_hex": {
          "type": "string",
          "description": "The raw transaction hex."
        },
        "label": {
          "type": "string",
          "description": "A label that was optionally set on transaction broadcast."
        }
      }
    },
    "lnrpcTransactionDetails": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcTransaction"
          },
          "description": "The list of transactions relevant to the wallet."
        }
      }
    },
    "lnrpcUpdateFailure": {
      "type": "string",
      "enum": [
        "UPDATE_FAILURE_UNKNOWN",
        "UPDATE_FAILURE_PENDING",
        "UPDATE_FAILURE_NOT_FOUND",
        "UPDATE_FAILURE_INTERNAL_ERR",
        "UPDATE_FAILURE_INVALID_PARAMETER"
      ],
      "default": "UPDATE_FAILURE_UNKNOWN"
    },
    "lnrpcUtxo": {
      "type": "object",
      "properties": {
        "address_type": {
          "$ref": "#/definitions/lnrpcAddressType",
          "title": "The type of address"
        },
        "address": {
          "type": "string",
          "title": "The address"
        },
        "amount_sat": {
          "type": "string",
          "format": "int64",
          "title": "The value of the unspent coin in satoshis"
        },
        "pk_script": {
          "type": "string",
          "title": "The pkscript in hex"
        },
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "title": "The outpoint in format txid:n"
        },
        "confirmations": {
          "type": "string",
          "format": "int64",
          "title": "The number of confirmations for the Utxo"
        }
      }
    },
    "lnrpcVerifyChanBackupResponse": {
      "type": "object"
    },
    "lnrpcVerifyMessageRequest": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "format": "byte",
          "description": "The message over which the signature is to be verified. When using REST,\nthis field must be encoded as base64."
        },
        "signature": {
          "type": "string",
          "title": "The signature to be verified over the given message"
        }
      }
    },
    "lnrpcVerifyMessageResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "title": "Whether the signature was valid over the given message"
        },
        "pubkey": {
          "type": "string",
          "title": "The pubkey recovered from the signature"
        }
      }
    },
    "lnrpcWalletAccountBalance": {
      "type": "object",
      "properties": {
        "confirmed_balance": {
          "type": "string",
          "format": "int64",
          "description": "The confirmed balance of the account (with \u003e= 1 confirmations)."
        },
        "unconfirmed_balance": {
          "type": "string",
          "format": "int64",
          "description": "The unconfirmed balance of the account (with 0 confirmations)."
        }
      }
    },
    "lnrpcWalletBalanceResponse": {
      "type": "object",
      "properties": {
        "total_balance": {
          "type": "string",
          "format": "int64",
          "title": "The balance of the wallet"
        },
        "confirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "The confirmed balance of a wallet(with \u003e= 1 confirmations)"
        },
        "unconfirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "The unconfirmed balance of a wallet(with 0 confirmations)"
        },
        "account_balance": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcWalletAccountBalance"
          },
          "description": "A mapping of each wallet account's name to its balance."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
