// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: neutrinorpc/neutrino.proto

package neutrinorpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates whether the neutrino backend is active or not.
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// Is fully synced.
	Synced bool `protobuf:"varint,2,opt,name=synced,proto3" json:"synced,omitempty"`
	// Best block height.
	BlockHeight int32 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Best block hash.
	BlockHash string `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Connected peers.
	Peers         []string `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StatusResponse) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *StatusResponse) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *StatusResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *StatusResponse) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type AddPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer to add.
	PeerAddrs     string `protobuf:"bytes,1,opt,name=peer_addrs,json=peerAddrs,proto3" json:"peer_addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{2}
}

func (x *AddPeerRequest) GetPeerAddrs() string {
	if x != nil {
		return x.PeerAddrs
	}
	return ""
}

type AddPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerResponse) Reset() {
	*x = AddPeerResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerResponse) ProtoMessage() {}

func (x *AddPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerResponse.ProtoReflect.Descriptor instead.
func (*AddPeerResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{3}
}

type DisconnectPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer to disconnect.
	PeerAddrs     string `protobuf:"bytes,1,opt,name=peer_addrs,json=peerAddrs,proto3" json:"peer_addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectPeerRequest) Reset() {
	*x = DisconnectPeerRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerRequest) ProtoMessage() {}

func (x *DisconnectPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerRequest.ProtoReflect.Descriptor instead.
func (*DisconnectPeerRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{4}
}

func (x *DisconnectPeerRequest) GetPeerAddrs() string {
	if x != nil {
		return x.PeerAddrs
	}
	return ""
}

type DisconnectPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectPeerResponse) Reset() {
	*x = DisconnectPeerResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerResponse) ProtoMessage() {}

func (x *DisconnectPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerResponse.ProtoReflect.Descriptor instead.
func (*DisconnectPeerResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{5}
}

type IsBannedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer to lookup.
	PeerAddrs     string `protobuf:"bytes,1,opt,name=peer_addrs,json=peerAddrs,proto3" json:"peer_addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBannedRequest) Reset() {
	*x = IsBannedRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBannedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBannedRequest) ProtoMessage() {}

func (x *IsBannedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBannedRequest.ProtoReflect.Descriptor instead.
func (*IsBannedRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{6}
}

func (x *IsBannedRequest) GetPeerAddrs() string {
	if x != nil {
		return x.PeerAddrs
	}
	return ""
}

type IsBannedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banned        bool                   `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBannedResponse) Reset() {
	*x = IsBannedResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBannedResponse) ProtoMessage() {}

func (x *IsBannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBannedResponse.ProtoReflect.Descriptor instead.
func (*IsBannedResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{7}
}

func (x *IsBannedResponse) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

type GetBlockHeaderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block hash in hex notation.
	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderRequest) Reset() {
	*x = GetBlockHeaderRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderRequest) ProtoMessage() {}

func (x *GetBlockHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlockHeaderRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockHeaderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The block hash (same as provided).
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The number of confirmations.
	Confirmations int64 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// The block size excluding witness data.
	StrippedSize int64 `protobuf:"varint,3,opt,name=stripped_size,json=strippedSize,proto3" json:"stripped_size,omitempty"`
	// The block size (bytes).
	Size int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// The block weight as defined in BIP 141.
	Weight int64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// The block height or index.
	Height int32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// The block version.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// The block version.
	VersionHex string `protobuf:"bytes,8,opt,name=version_hex,json=versionHex,proto3" json:"version_hex,omitempty"`
	// The merkle root.
	Merkleroot string `protobuf:"bytes,9,opt,name=merkleroot,proto3" json:"merkleroot,omitempty"`
	// The block time in seconds since epoch (Jan 1 1970 GMT).
	Time int64 `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
	// The nonce.
	Nonce uint32 `protobuf:"varint,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The bits in hex notation.
	Bits string `protobuf:"bytes,12,opt,name=bits,proto3" json:"bits,omitempty"`
	// The number of transactions in the block.
	Ntx int32 `protobuf:"varint,13,opt,name=ntx,proto3" json:"ntx,omitempty"`
	// The hash of the previous block.
	PreviousBlockHash string `protobuf:"bytes,14,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	// The raw hex of the block.
	RawHex        []byte `protobuf:"bytes,15,opt,name=raw_hex,json=rawHex,proto3" json:"raw_hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeaderResponse) Reset() {
	*x = GetBlockHeaderResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderResponse) ProtoMessage() {}

func (x *GetBlockHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlockHeaderResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetConfirmations() int64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetStrippedSize() int64 {
	if x != nil {
		return x.StrippedSize
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetVersionHex() string {
	if x != nil {
		return x.VersionHex
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetMerkleroot() string {
	if x != nil {
		return x.Merkleroot
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetNtx() int32 {
	if x != nil {
		return x.Ntx
	}
	return 0
}

func (x *GetBlockHeaderResponse) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *GetBlockHeaderResponse) GetRawHex() []byte {
	if x != nil {
		return x.RawHex
	}
	return nil
}

type GetBlockRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block hash in hex notation.
	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The block hash (same as provided).
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The number of confirmations.
	Confirmations int64 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// The block size excluding witness data.
	StrippedSize int64 `protobuf:"varint,3,opt,name=stripped_size,json=strippedSize,proto3" json:"stripped_size,omitempty"`
	// The block size (bytes).
	Size int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// The block weight as defined in BIP 141.
	Weight int64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// The block height or index.
	Height int32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// The block version.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// The block version.
	VersionHex string `protobuf:"bytes,8,opt,name=version_hex,json=versionHex,proto3" json:"version_hex,omitempty"`
	// The merkle root.
	Merkleroot string `protobuf:"bytes,9,opt,name=merkleroot,proto3" json:"merkleroot,omitempty"`
	// List of transaction ids.
	Tx []string `protobuf:"bytes,10,rep,name=tx,proto3" json:"tx,omitempty"`
	// The block time in seconds since epoch (Jan 1 1970 GMT).
	Time int64 `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`
	// The nonce.
	Nonce uint32 `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The bits in hex notation.
	Bits string `protobuf:"bytes,13,opt,name=bits,proto3" json:"bits,omitempty"`
	// The number of transactions in the block.
	Ntx int32 `protobuf:"varint,14,opt,name=ntx,proto3" json:"ntx,omitempty"`
	// The hash of the previous block.
	PreviousBlockHash string `protobuf:"bytes,15,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	// The raw hex of the block.
	RawHex        []byte `protobuf:"bytes,16,opt,name=raw_hex,json=rawHex,proto3" json:"raw_hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{11}
}

func (x *GetBlockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockResponse) GetConfirmations() int64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetBlockResponse) GetStrippedSize() int64 {
	if x != nil {
		return x.StrippedSize
	}
	return 0
}

func (x *GetBlockResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetBlockResponse) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GetBlockResponse) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetBlockResponse) GetVersionHex() string {
	if x != nil {
		return x.VersionHex
	}
	return ""
}

func (x *GetBlockResponse) GetMerkleroot() string {
	if x != nil {
		return x.Merkleroot
	}
	return ""
}

func (x *GetBlockResponse) GetTx() []string {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GetBlockResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetBlockResponse) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *GetBlockResponse) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *GetBlockResponse) GetNtx() int32 {
	if x != nil {
		return x.Ntx
	}
	return 0
}

func (x *GetBlockResponse) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *GetBlockResponse) GetRawHex() []byte {
	if x != nil {
		return x.RawHex
	}
	return nil
}

type GetCFilterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block hash in hex notation.
	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCFilterRequest) Reset() {
	*x = GetCFilterRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCFilterRequest) ProtoMessage() {}

func (x *GetCFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCFilterRequest.ProtoReflect.Descriptor instead.
func (*GetCFilterRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{12}
}

func (x *GetCFilterRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetCFilterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCS filter.
	Filter        []byte `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCFilterResponse) Reset() {
	*x = GetCFilterResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCFilterResponse) ProtoMessage() {}

func (x *GetCFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCFilterResponse.ProtoReflect.Descriptor instead.
func (*GetCFilterResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{13}
}

func (x *GetCFilterResponse) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetBlockHashRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The block height or index.
	Height        int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHashRequest) Reset() {
	*x = GetBlockHashRequest{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashRequest) ProtoMessage() {}

func (x *GetBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{14}
}

func (x *GetBlockHashRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockHashResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The block hash.
	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHashResponse) Reset() {
	*x = GetBlockHashResponse{}
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashResponse) ProtoMessage() {}

func (x *GetBlockHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_neutrinorpc_neutrino_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHashResponse) Descriptor() ([]byte, []int) {
	return file_neutrinorpc_neutrino_proto_rawDescGZIP(), []int{15}
}

func (x *GetBlockHashResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

var File_neutrinorpc_neutrino_proto protoreflect.FileDescriptor

const file_neutrinorpc_neutrino_proto_rawDesc = "" +
	"\n" +
	"\x1aneutrinorpc/neutrino.proto\x12\vneutrinorpc\"\x0f\n" +
	"\rStatusRequest\"\x98\x01\n" +
	"\x0eStatusResponse\x12\x16\n" +
	"\x06active\x18\x01 \x01(\bR\x06active\x12\x16\n" +
	"\x06synced\x18\x02 \x01(\bR\x06synced\x12!\n" +
	"\fblock_height\x18\x03 \x01(\x05R\vblockHeight\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x04 \x01(\tR\tblockHash\x12\x14\n" +
	"\x05peers\x18\x05 \x03(\tR\x05peers\"/\n" +
	"\x0eAddPeerRequest\x12\x1d\n" +
	"\n" +
	"peer_addrs\x18\x01 \x01(\tR\tpeerAddrs\"\x11\n" +
	"\x0fAddPeerResponse\"6\n" +
	"\x15DisconnectPeerRequest\x12\x1d\n" +
	"\n" +
	"peer_addrs\x18\x01 \x01(\tR\tpeerAddrs\"\x18\n" +
	"\x16DisconnectPeerResponse\"0\n" +
	"\x0fIsBannedRequest\x12\x1d\n" +
	"\n" +
	"peer_addrs\x18\x01 \x01(\tR\tpeerAddrs\"*\n" +
	"\x10IsBannedResponse\x12\x16\n" +
	"\x06banned\x18\x01 \x01(\bR\x06banned\"+\n" +
	"\x15GetBlockHeaderRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\"\xaf\x03\n" +
	"\x16GetBlockHeaderResponse\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12$\n" +
	"\rconfirmations\x18\x02 \x01(\x03R\rconfirmations\x12#\n" +
	"\rstripped_size\x18\x03 \x01(\x03R\fstrippedSize\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x16\n" +
	"\x06weight\x18\x05 \x01(\x03R\x06weight\x12\x16\n" +
	"\x06height\x18\x06 \x01(\x05R\x06height\x12\x18\n" +
	"\aversion\x18\a \x01(\x05R\aversion\x12\x1f\n" +
	"\vversion_hex\x18\b \x01(\tR\n" +
	"versionHex\x12\x1e\n" +
	"\n" +
	"merkleroot\x18\t \x01(\tR\n" +
	"merkleroot\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\x03R\x04time\x12\x14\n" +
	"\x05nonce\x18\v \x01(\rR\x05nonce\x12\x12\n" +
	"\x04bits\x18\f \x01(\tR\x04bits\x12\x10\n" +
	"\x03ntx\x18\r \x01(\x05R\x03ntx\x12.\n" +
	"\x13previous_block_hash\x18\x0e \x01(\tR\x11previousBlockHash\x12\x17\n" +
	"\araw_hex\x18\x0f \x01(\fR\x06rawHex\"%\n" +
	"\x0fGetBlockRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\"\xb9\x03\n" +
	"\x10GetBlockResponse\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12$\n" +
	"\rconfirmations\x18\x02 \x01(\x03R\rconfirmations\x12#\n" +
	"\rstripped_size\x18\x03 \x01(\x03R\fstrippedSize\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x16\n" +
	"\x06weight\x18\x05 \x01(\x03R\x06weight\x12\x16\n" +
	"\x06height\x18\x06 \x01(\x05R\x06height\x12\x18\n" +
	"\aversion\x18\a \x01(\x05R\aversion\x12\x1f\n" +
	"\vversion_hex\x18\b \x01(\tR\n" +
	"versionHex\x12\x1e\n" +
	"\n" +
	"merkleroot\x18\t \x01(\tR\n" +
	"merkleroot\x12\x0e\n" +
	"\x02tx\x18\n" +
	" \x03(\tR\x02tx\x12\x12\n" +
	"\x04time\x18\v \x01(\x03R\x04time\x12\x14\n" +
	"\x05nonce\x18\f \x01(\rR\x05nonce\x12\x12\n" +
	"\x04bits\x18\r \x01(\tR\x04bits\x12\x10\n" +
	"\x03ntx\x18\x0e \x01(\x05R\x03ntx\x12.\n" +
	"\x13previous_block_hash\x18\x0f \x01(\tR\x11previousBlockHash\x12\x17\n" +
	"\araw_hex\x18\x10 \x01(\fR\x06rawHex\"'\n" +
	"\x11GetCFilterRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\",\n" +
	"\x12GetCFilterResponse\x12\x16\n" +
	"\x06filter\x18\x01 \x01(\fR\x06filter\"-\n" +
	"\x13GetBlockHashRequest\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x05R\x06height\"*\n" +
	"\x14GetBlockHashResponse\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash2\x87\x05\n" +
	"\vNeutrinoKit\x12A\n" +
	"\x06Status\x12\x1a.neutrinorpc.StatusRequest\x1a\x1b.neutrinorpc.StatusResponse\x12D\n" +
	"\aAddPeer\x12\x1b.neutrinorpc.AddPeerRequest\x1a\x1c.neutrinorpc.AddPeerResponse\x12Y\n" +
	"\x0eDisconnectPeer\x12\".neutrinorpc.DisconnectPeerRequest\x1a#.neutrinorpc.DisconnectPeerResponse\x12G\n" +
	"\bIsBanned\x12\x1c.neutrinorpc.IsBannedRequest\x1a\x1d.neutrinorpc.IsBannedResponse\x12Y\n" +
	"\x0eGetBlockHeader\x12\".neutrinorpc.GetBlockHeaderRequest\x1a#.neutrinorpc.GetBlockHeaderResponse\x12G\n" +
	"\bGetBlock\x12\x1c.neutrinorpc.GetBlockRequest\x1a\x1d.neutrinorpc.GetBlockResponse\x12M\n" +
	"\n" +
	"GetCFilter\x12\x1e.neutrinorpc.GetCFilterRequest\x1a\x1f.neutrinorpc.GetCFilterResponse\x12X\n" +
	"\fGetBlockHash\x12 .neutrinorpc.GetBlockHashRequest\x1a!.neutrinorpc.GetBlockHashResponse\"\x03\x88\x02\x01B3Z1github.com/lightningnetwork/lnd/lnrpc/neutrinorpcb\x06proto3"

var (
	file_neutrinorpc_neutrino_proto_rawDescOnce sync.Once
	file_neutrinorpc_neutrino_proto_rawDescData []byte
)

func file_neutrinorpc_neutrino_proto_rawDescGZIP() []byte {
	file_neutrinorpc_neutrino_proto_rawDescOnce.Do(func() {
		file_neutrinorpc_neutrino_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_neutrinorpc_neutrino_proto_rawDesc), len(file_neutrinorpc_neutrino_proto_rawDesc)))
	})
	return file_neutrinorpc_neutrino_proto_rawDescData
}

var file_neutrinorpc_neutrino_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_neutrinorpc_neutrino_proto_goTypes = []any{
	(*StatusRequest)(nil),          // 0: neutrinorpc.StatusRequest
	(*StatusResponse)(nil),         // 1: neutrinorpc.StatusResponse
	(*AddPeerRequest)(nil),         // 2: neutrinorpc.AddPeerRequest
	(*AddPeerResponse)(nil),        // 3: neutrinorpc.AddPeerResponse
	(*DisconnectPeerRequest)(nil),  // 4: neutrinorpc.DisconnectPeerRequest
	(*DisconnectPeerResponse)(nil), // 5: neutrinorpc.DisconnectPeerResponse
	(*IsBannedRequest)(nil),        // 6: neutrinorpc.IsBannedRequest
	(*IsBannedResponse)(nil),       // 7: neutrinorpc.IsBannedResponse
	(*GetBlockHeaderRequest)(nil),  // 8: neutrinorpc.GetBlockHeaderRequest
	(*GetBlockHeaderResponse)(nil), // 9: neutrinorpc.GetBlockHeaderResponse
	(*GetBlockRequest)(nil),        // 10: neutrinorpc.GetBlockRequest
	(*GetBlockResponse)(nil),       // 11: neutrinorpc.GetBlockResponse
	(*GetCFilterRequest)(nil),      // 12: neutrinorpc.GetCFilterRequest
	(*GetCFilterResponse)(nil),     // 13: neutrinorpc.GetCFilterResponse
	(*GetBlockHashRequest)(nil),    // 14: neutrinorpc.GetBlockHashRequest
	(*GetBlockHashResponse)(nil),   // 15: neutrinorpc.GetBlockHashResponse
}
var file_neutrinorpc_neutrino_proto_depIdxs = []int32{
	0,  // 0: neutrinorpc.NeutrinoKit.Status:input_type -> neutrinorpc.StatusRequest
	2,  // 1: neutrinorpc.NeutrinoKit.AddPeer:input_type -> neutrinorpc.AddPeerRequest
	4,  // 2: neutrinorpc.NeutrinoKit.DisconnectPeer:input_type -> neutrinorpc.DisconnectPeerRequest
	6,  // 3: neutrinorpc.NeutrinoKit.IsBanned:input_type -> neutrinorpc.IsBannedRequest
	8,  // 4: neutrinorpc.NeutrinoKit.GetBlockHeader:input_type -> neutrinorpc.GetBlockHeaderRequest
	10, // 5: neutrinorpc.NeutrinoKit.GetBlock:input_type -> neutrinorpc.GetBlockRequest
	12, // 6: neutrinorpc.NeutrinoKit.GetCFilter:input_type -> neutrinorpc.GetCFilterRequest
	14, // 7: neutrinorpc.NeutrinoKit.GetBlockHash:input_type -> neutrinorpc.GetBlockHashRequest
	1,  // 8: neutrinorpc.NeutrinoKit.Status:output_type -> neutrinorpc.StatusResponse
	3,  // 9: neutrinorpc.NeutrinoKit.AddPeer:output_type -> neutrinorpc.AddPeerResponse
	5,  // 10: neutrinorpc.NeutrinoKit.DisconnectPeer:output_type -> neutrinorpc.DisconnectPeerResponse
	7,  // 11: neutrinorpc.NeutrinoKit.IsBanned:output_type -> neutrinorpc.IsBannedResponse
	9,  // 12: neutrinorpc.NeutrinoKit.GetBlockHeader:output_type -> neutrinorpc.GetBlockHeaderResponse
	11, // 13: neutrinorpc.NeutrinoKit.GetBlock:output_type -> neutrinorpc.GetBlockResponse
	13, // 14: neutrinorpc.NeutrinoKit.GetCFilter:output_type -> neutrinorpc.GetCFilterResponse
	15, // 15: neutrinorpc.NeutrinoKit.GetBlockHash:output_type -> neutrinorpc.GetBlockHashResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_neutrinorpc_neutrino_proto_init() }
func file_neutrinorpc_neutrino_proto_init() {
	if File_neutrinorpc_neutrino_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_neutrinorpc_neutrino_proto_rawDesc), len(file_neutrinorpc_neutrino_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_neutrinorpc_neutrino_proto_goTypes,
		DependencyIndexes: file_neutrinorpc_neutrino_proto_depIdxs,
		MessageInfos:      file_neutrinorpc_neutrino_proto_msgTypes,
	}.Build()
	File_neutrinorpc_neutrino_proto = out.File
	file_neutrinorpc_neutrino_proto_goTypes = nil
	file_neutrinorpc_neutrino_proto_depIdxs = nil
}
