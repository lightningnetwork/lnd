// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package switchrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwitchClient is the client API for Switch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchClient interface {
	// Fetches all attempt results stored in the Switch.
	FetchAttemptResults(ctx context.Context, in *FetchAttemptResultsRequest, opts ...grpc.CallOption) (*FetchAttemptResultsResponse, error)
	// Deletes a specific attempt result from the result store tracking local
	// payment attempts.
	DeleteAttemptResult(ctx context.Context, in *DeleteAttemptResultRequest, opts ...grpc.CallOption) (*DeleteAttemptResultResponse, error)
}

type switchClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchClient(cc grpc.ClientConnInterface) SwitchClient {
	return &switchClient{cc}
}

func (c *switchClient) FetchAttemptResults(ctx context.Context, in *FetchAttemptResultsRequest, opts ...grpc.CallOption) (*FetchAttemptResultsResponse, error) {
	out := new(FetchAttemptResultsResponse)
	err := c.cc.Invoke(ctx, "/switchrpc.Switch/FetchAttemptResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) DeleteAttemptResult(ctx context.Context, in *DeleteAttemptResultRequest, opts ...grpc.CallOption) (*DeleteAttemptResultResponse, error) {
	out := new(DeleteAttemptResultResponse)
	err := c.cc.Invoke(ctx, "/switchrpc.Switch/DeleteAttemptResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServer is the server API for Switch service.
// All implementations must embed UnimplementedSwitchServer
// for forward compatibility
type SwitchServer interface {
	// Fetches all attempt results stored in the Switch.
	FetchAttemptResults(context.Context, *FetchAttemptResultsRequest) (*FetchAttemptResultsResponse, error)
	// Deletes a specific attempt result from the result store tracking local
	// payment attempts.
	DeleteAttemptResult(context.Context, *DeleteAttemptResultRequest) (*DeleteAttemptResultResponse, error)
	mustEmbedUnimplementedSwitchServer()
}

// UnimplementedSwitchServer must be embedded to have forward compatible implementations.
type UnimplementedSwitchServer struct {
}

func (UnimplementedSwitchServer) FetchAttemptResults(context.Context, *FetchAttemptResultsRequest) (*FetchAttemptResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAttemptResults not implemented")
}
func (UnimplementedSwitchServer) DeleteAttemptResult(context.Context, *DeleteAttemptResultRequest) (*DeleteAttemptResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttemptResult not implemented")
}
func (UnimplementedSwitchServer) mustEmbedUnimplementedSwitchServer() {}

// UnsafeSwitchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchServer will
// result in compilation errors.
type UnsafeSwitchServer interface {
	mustEmbedUnimplementedSwitchServer()
}

func RegisterSwitchServer(s grpc.ServiceRegistrar, srv SwitchServer) {
	s.RegisterService(&Switch_ServiceDesc, srv)
}

func _Switch_FetchAttemptResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttemptResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).FetchAttemptResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switchrpc.Switch/FetchAttemptResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).FetchAttemptResults(ctx, req.(*FetchAttemptResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_DeleteAttemptResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttemptResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).DeleteAttemptResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switchrpc.Switch/DeleteAttemptResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).DeleteAttemptResult(ctx, req.(*DeleteAttemptResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Switch_ServiceDesc is the grpc.ServiceDesc for Switch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Switch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "switchrpc.Switch",
	HandlerType: (*SwitchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAttemptResults",
			Handler:    _Switch_FetchAttemptResults_Handler,
		},
		{
			MethodName: "DeleteAttemptResult",
			Handler:    _Switch_DeleteAttemptResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "switchrpc/switch.proto",
}
