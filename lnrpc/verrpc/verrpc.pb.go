// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: verrpc/verrpc.proto

package verrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_verrpc_verrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_verrpc_verrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_verrpc_verrpc_proto_rawDescGZIP(), []int{0}
}

type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A verbose description of the daemon's commit.
	Commit string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// The SHA1 commit hash that the daemon is compiled with.
	CommitHash string `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// The semantic version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// The major application version.
	AppMajor uint32 `protobuf:"varint,4,opt,name=app_major,json=appMajor,proto3" json:"app_major,omitempty"`
	// The minor application version.
	AppMinor uint32 `protobuf:"varint,5,opt,name=app_minor,json=appMinor,proto3" json:"app_minor,omitempty"`
	// The application patch number.
	AppPatch uint32 `protobuf:"varint,6,opt,name=app_patch,json=appPatch,proto3" json:"app_patch,omitempty"`
	// The application pre-release modifier, possibly empty.
	AppPreRelease string `protobuf:"bytes,7,opt,name=app_pre_release,json=appPreRelease,proto3" json:"app_pre_release,omitempty"`
	// The list of build tags that were supplied during compilation.
	BuildTags []string `protobuf:"bytes,8,rep,name=build_tags,json=buildTags,proto3" json:"build_tags,omitempty"`
	// The version of go that compiled the executable.
	GoVersion     string `protobuf:"bytes,9,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_verrpc_verrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_verrpc_verrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_verrpc_verrpc_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Version) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetAppMajor() uint32 {
	if x != nil {
		return x.AppMajor
	}
	return 0
}

func (x *Version) GetAppMinor() uint32 {
	if x != nil {
		return x.AppMinor
	}
	return 0
}

func (x *Version) GetAppPatch() uint32 {
	if x != nil {
		return x.AppPatch
	}
	return 0
}

func (x *Version) GetAppPreRelease() string {
	if x != nil {
		return x.AppPreRelease
	}
	return ""
}

func (x *Version) GetBuildTags() []string {
	if x != nil {
		return x.BuildTags
	}
	return nil
}

func (x *Version) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

var File_verrpc_verrpc_proto protoreflect.FileDescriptor

const file_verrpc_verrpc_proto_rawDesc = "" +
	"\n" +
	"\x13verrpc/verrpc.proto\x12\x06verrpc\"\x10\n" +
	"\x0eVersionRequest\"\x99\x02\n" +
	"\aVersion\x12\x16\n" +
	"\x06commit\x18\x01 \x01(\tR\x06commit\x12\x1f\n" +
	"\vcommit_hash\x18\x02 \x01(\tR\n" +
	"commitHash\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x1b\n" +
	"\tapp_major\x18\x04 \x01(\rR\bappMajor\x12\x1b\n" +
	"\tapp_minor\x18\x05 \x01(\rR\bappMinor\x12\x1b\n" +
	"\tapp_patch\x18\x06 \x01(\rR\bappPatch\x12&\n" +
	"\x0fapp_pre_release\x18\a \x01(\tR\rappPreRelease\x12\x1d\n" +
	"\n" +
	"build_tags\x18\b \x03(\tR\tbuildTags\x12\x1d\n" +
	"\n" +
	"go_version\x18\t \x01(\tR\tgoVersion2B\n" +
	"\tVersioner\x125\n" +
	"\n" +
	"GetVersion\x12\x16.verrpc.VersionRequest\x1a\x0f.verrpc.VersionB.Z,github.com/lightningnetwork/lnd/lnrpc/verrpcb\x06proto3"

var (
	file_verrpc_verrpc_proto_rawDescOnce sync.Once
	file_verrpc_verrpc_proto_rawDescData []byte
)

func file_verrpc_verrpc_proto_rawDescGZIP() []byte {
	file_verrpc_verrpc_proto_rawDescOnce.Do(func() {
		file_verrpc_verrpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_verrpc_verrpc_proto_rawDesc), len(file_verrpc_verrpc_proto_rawDesc)))
	})
	return file_verrpc_verrpc_proto_rawDescData
}

var file_verrpc_verrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_verrpc_verrpc_proto_goTypes = []any{
	(*VersionRequest)(nil), // 0: verrpc.VersionRequest
	(*Version)(nil),        // 1: verrpc.Version
}
var file_verrpc_verrpc_proto_depIdxs = []int32{
	0, // 0: verrpc.Versioner.GetVersion:input_type -> verrpc.VersionRequest
	1, // 1: verrpc.Versioner.GetVersion:output_type -> verrpc.Version
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_verrpc_verrpc_proto_init() }
func file_verrpc_verrpc_proto_init() {
	if File_verrpc_verrpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_verrpc_verrpc_proto_rawDesc), len(file_verrpc_verrpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_verrpc_verrpc_proto_goTypes,
		DependencyIndexes: file_verrpc_verrpc_proto_depIdxs,
		MessageInfos:      file_verrpc_verrpc_proto_msgTypes,
	}.Build()
	File_verrpc_verrpc_proto = out.File
	file_verrpc_verrpc_proto_goTypes = nil
	file_verrpc_verrpc_proto_depIdxs = nil
}
