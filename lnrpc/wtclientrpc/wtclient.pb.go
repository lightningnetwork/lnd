// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: wtclientrpc/wtclient.proto

package wtclientrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyType int32

const (
	// Selects the policy from the legacy tower client.
	PolicyType_LEGACY PolicyType = 0
	// Selects the policy from the anchor tower client.
	PolicyType_ANCHOR PolicyType = 1
	// Selects the policy from the taproot tower client.
	PolicyType_TAPROOT PolicyType = 2
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0: "LEGACY",
		1: "ANCHOR",
		2: "TAPROOT",
	}
	PolicyType_value = map[string]int32{
		"LEGACY":  0,
		"ANCHOR":  1,
		"TAPROOT": 2,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_wtclientrpc_wtclient_proto_enumTypes[0].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_wtclientrpc_wtclient_proto_enumTypes[0]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{0}
}

type AddTowerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifying public key of the watchtower to add.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// A network address the watchtower is reachable over.
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTowerRequest) Reset() {
	*x = AddTowerRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTowerRequest) ProtoMessage() {}

func (x *AddTowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTowerRequest.ProtoReflect.Descriptor instead.
func (*AddTowerRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{0}
}

func (x *AddTowerRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AddTowerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddTowerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTowerResponse) Reset() {
	*x = AddTowerResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTowerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTowerResponse) ProtoMessage() {}

func (x *AddTowerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTowerResponse.ProtoReflect.Descriptor instead.
func (*AddTowerResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{1}
}

type RemoveTowerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifying public key of the watchtower to remove.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// If set, then the record for this address will be removed, indicating that is
	// is stale. Otherwise, the watchtower will no longer be used for future
	// session negotiations and backups.
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTowerRequest) Reset() {
	*x = RemoveTowerRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTowerRequest) ProtoMessage() {}

func (x *RemoveTowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTowerRequest.ProtoReflect.Descriptor instead.
func (*RemoveTowerRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveTowerRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *RemoveTowerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RemoveTowerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTowerResponse) Reset() {
	*x = RemoveTowerResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTowerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTowerResponse) ProtoMessage() {}

func (x *RemoveTowerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTowerResponse.ProtoReflect.Descriptor instead.
func (*RemoveTowerResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{3}
}

type DeactivateTowerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifying public key of the watchtower to deactivate.
	Pubkey        []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateTowerRequest) Reset() {
	*x = DeactivateTowerRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateTowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTowerRequest) ProtoMessage() {}

func (x *DeactivateTowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTowerRequest.ProtoReflect.Descriptor instead.
func (*DeactivateTowerRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{4}
}

func (x *DeactivateTowerRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type DeactivateTowerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A string describing the action that took place.
	Status        string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateTowerResponse) Reset() {
	*x = DeactivateTowerResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateTowerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateTowerResponse) ProtoMessage() {}

func (x *DeactivateTowerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateTowerResponse.ProtoReflect.Descriptor instead.
func (*DeactivateTowerResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{5}
}

func (x *DeactivateTowerResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TerminateSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the session that should be terminated.
	SessionId     []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateSessionRequest) Reset() {
	*x = TerminateSessionRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateSessionRequest) ProtoMessage() {}

func (x *TerminateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateSessionRequest.ProtoReflect.Descriptor instead.
func (*TerminateSessionRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{6}
}

func (x *TerminateSessionRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

type TerminateSessionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A string describing the action that took place.
	Status        string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateSessionResponse) Reset() {
	*x = TerminateSessionResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateSessionResponse) ProtoMessage() {}

func (x *TerminateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateSessionResponse.ProtoReflect.Descriptor instead.
func (*TerminateSessionResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{7}
}

func (x *TerminateSessionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTowerInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifying public key of the watchtower to retrieve information for.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Whether we should include sessions with the watchtower in the response.
	IncludeSessions bool `protobuf:"varint,2,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty"`
	// Whether to exclude exhausted sessions in the response info. This option
	// is only meaningful if include_sessions is true.
	ExcludeExhaustedSessions bool `protobuf:"varint,3,opt,name=exclude_exhausted_sessions,json=excludeExhaustedSessions,proto3" json:"exclude_exhausted_sessions,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetTowerInfoRequest) Reset() {
	*x = GetTowerInfoRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTowerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTowerInfoRequest) ProtoMessage() {}

func (x *GetTowerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTowerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTowerInfoRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{8}
}

func (x *GetTowerInfoRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *GetTowerInfoRequest) GetIncludeSessions() bool {
	if x != nil {
		return x.IncludeSessions
	}
	return false
}

func (x *GetTowerInfoRequest) GetExcludeExhaustedSessions() bool {
	if x != nil {
		return x.ExcludeExhaustedSessions
	}
	return false
}

type TowerSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of successful backups that have been made to the
	// watchtower session.
	NumBackups uint32 `protobuf:"varint,1,opt,name=num_backups,json=numBackups,proto3" json:"num_backups,omitempty"`
	// The total number of backups in the session that are currently pending to be
	// acknowledged by the watchtower.
	NumPendingBackups uint32 `protobuf:"varint,2,opt,name=num_pending_backups,json=numPendingBackups,proto3" json:"num_pending_backups,omitempty"`
	// The maximum number of backups allowed by the watchtower session.
	MaxBackups uint32 `protobuf:"varint,3,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	// Deprecated, use sweep_sat_per_vbyte.
	// The fee rate, in satoshis per vbyte, that will be used by the watchtower for
	// the justice transaction in the event of a channel breach.
	//
	// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
	SweepSatPerByte uint32 `protobuf:"varint,4,opt,name=sweep_sat_per_byte,json=sweepSatPerByte,proto3" json:"sweep_sat_per_byte,omitempty"`
	// The fee rate, in satoshis per vbyte, that will be used by the watchtower for
	// the justice transaction in the event of a channel breach.
	SweepSatPerVbyte uint32 `protobuf:"varint,5,opt,name=sweep_sat_per_vbyte,json=sweepSatPerVbyte,proto3" json:"sweep_sat_per_vbyte,omitempty"`
	// The ID of the session.
	Id            []byte `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TowerSession) Reset() {
	*x = TowerSession{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TowerSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerSession) ProtoMessage() {}

func (x *TowerSession) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerSession.ProtoReflect.Descriptor instead.
func (*TowerSession) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{9}
}

func (x *TowerSession) GetNumBackups() uint32 {
	if x != nil {
		return x.NumBackups
	}
	return 0
}

func (x *TowerSession) GetNumPendingBackups() uint32 {
	if x != nil {
		return x.NumPendingBackups
	}
	return 0
}

func (x *TowerSession) GetMaxBackups() uint32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
func (x *TowerSession) GetSweepSatPerByte() uint32 {
	if x != nil {
		return x.SweepSatPerByte
	}
	return 0
}

func (x *TowerSession) GetSweepSatPerVbyte() uint32 {
	if x != nil {
		return x.SweepSatPerVbyte
	}
	return 0
}

func (x *TowerSession) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type Tower struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifying public key of the watchtower.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The list of addresses the watchtower is reachable over.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Deprecated, use the active_session_candidate field under the
	// correct identifier in the client_type map.
	// Whether the watchtower is currently a candidate for new sessions.
	//
	// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
	ActiveSessionCandidate bool `protobuf:"varint,3,opt,name=active_session_candidate,json=activeSessionCandidate,proto3" json:"active_session_candidate,omitempty"`
	// Deprecated, use the num_sessions field under the correct identifier
	// in the client_type map.
	// The number of sessions that have been negotiated with the watchtower.
	//
	// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
	NumSessions uint32 `protobuf:"varint,4,opt,name=num_sessions,json=numSessions,proto3" json:"num_sessions,omitempty"`
	// Deprecated, use the sessions field under the correct identifier in the
	// client_type map.
	// The list of sessions that have been negotiated with the watchtower.
	//
	// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
	Sessions []*TowerSession `protobuf:"bytes,5,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// A list sessions held with the tower.
	SessionInfo   []*TowerSessionInfo `protobuf:"bytes,6,rep,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tower) Reset() {
	*x = Tower{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tower) ProtoMessage() {}

func (x *Tower) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tower.ProtoReflect.Descriptor instead.
func (*Tower) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{10}
}

func (x *Tower) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *Tower) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
func (x *Tower) GetActiveSessionCandidate() bool {
	if x != nil {
		return x.ActiveSessionCandidate
	}
	return false
}

// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
func (x *Tower) GetNumSessions() uint32 {
	if x != nil {
		return x.NumSessions
	}
	return 0
}

// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
func (x *Tower) GetSessions() []*TowerSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *Tower) GetSessionInfo() []*TowerSessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

type TowerSessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the watchtower is currently a candidate for new sessions.
	ActiveSessionCandidate bool `protobuf:"varint,1,opt,name=active_session_candidate,json=activeSessionCandidate,proto3" json:"active_session_candidate,omitempty"`
	// The number of sessions that have been negotiated with the watchtower.
	NumSessions uint32 `protobuf:"varint,2,opt,name=num_sessions,json=numSessions,proto3" json:"num_sessions,omitempty"`
	// The list of sessions that have been negotiated with the watchtower.
	Sessions []*TowerSession `protobuf:"bytes,3,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// The session's policy type.
	PolicyType    PolicyType `protobuf:"varint,4,opt,name=policy_type,json=policyType,proto3,enum=wtclientrpc.PolicyType" json:"policy_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TowerSessionInfo) Reset() {
	*x = TowerSessionInfo{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TowerSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerSessionInfo) ProtoMessage() {}

func (x *TowerSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerSessionInfo.ProtoReflect.Descriptor instead.
func (*TowerSessionInfo) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{11}
}

func (x *TowerSessionInfo) GetActiveSessionCandidate() bool {
	if x != nil {
		return x.ActiveSessionCandidate
	}
	return false
}

func (x *TowerSessionInfo) GetNumSessions() uint32 {
	if x != nil {
		return x.NumSessions
	}
	return 0
}

func (x *TowerSessionInfo) GetSessions() []*TowerSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *TowerSessionInfo) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_LEGACY
}

type ListTowersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether we should include sessions with the watchtower in the response.
	IncludeSessions bool `protobuf:"varint,1,opt,name=include_sessions,json=includeSessions,proto3" json:"include_sessions,omitempty"`
	// Whether to exclude exhausted sessions in the response info. This option
	// is only meaningful if include_sessions is true.
	ExcludeExhaustedSessions bool `protobuf:"varint,2,opt,name=exclude_exhausted_sessions,json=excludeExhaustedSessions,proto3" json:"exclude_exhausted_sessions,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ListTowersRequest) Reset() {
	*x = ListTowersRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTowersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTowersRequest) ProtoMessage() {}

func (x *ListTowersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTowersRequest.ProtoReflect.Descriptor instead.
func (*ListTowersRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{12}
}

func (x *ListTowersRequest) GetIncludeSessions() bool {
	if x != nil {
		return x.IncludeSessions
	}
	return false
}

func (x *ListTowersRequest) GetExcludeExhaustedSessions() bool {
	if x != nil {
		return x.ExcludeExhaustedSessions
	}
	return false
}

type ListTowersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of watchtowers available for new backups.
	Towers        []*Tower `protobuf:"bytes,1,rep,name=towers,proto3" json:"towers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTowersResponse) Reset() {
	*x = ListTowersResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTowersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTowersResponse) ProtoMessage() {}

func (x *ListTowersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTowersResponse.ProtoReflect.Descriptor instead.
func (*ListTowersResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{13}
}

func (x *ListTowersResponse) GetTowers() []*Tower {
	if x != nil {
		return x.Towers
	}
	return nil
}

type StatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{14}
}

type StatsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of backups made to all active and exhausted watchtower
	// sessions.
	NumBackups uint32 `protobuf:"varint,1,opt,name=num_backups,json=numBackups,proto3" json:"num_backups,omitempty"`
	// The total number of backups that are pending to be acknowledged by all
	// active and exhausted watchtower sessions.
	NumPendingBackups uint32 `protobuf:"varint,2,opt,name=num_pending_backups,json=numPendingBackups,proto3" json:"num_pending_backups,omitempty"`
	// The total number of backups that all active and exhausted watchtower
	// sessions have failed to acknowledge.
	NumFailedBackups uint32 `protobuf:"varint,3,opt,name=num_failed_backups,json=numFailedBackups,proto3" json:"num_failed_backups,omitempty"`
	// The total number of new sessions made to watchtowers.
	NumSessionsAcquired uint32 `protobuf:"varint,4,opt,name=num_sessions_acquired,json=numSessionsAcquired,proto3" json:"num_sessions_acquired,omitempty"`
	// The total number of watchtower sessions that have been exhausted.
	NumSessionsExhausted uint32 `protobuf:"varint,5,opt,name=num_sessions_exhausted,json=numSessionsExhausted,proto3" json:"num_sessions_exhausted,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{15}
}

func (x *StatsResponse) GetNumBackups() uint32 {
	if x != nil {
		return x.NumBackups
	}
	return 0
}

func (x *StatsResponse) GetNumPendingBackups() uint32 {
	if x != nil {
		return x.NumPendingBackups
	}
	return 0
}

func (x *StatsResponse) GetNumFailedBackups() uint32 {
	if x != nil {
		return x.NumFailedBackups
	}
	return 0
}

func (x *StatsResponse) GetNumSessionsAcquired() uint32 {
	if x != nil {
		return x.NumSessionsAcquired
	}
	return 0
}

func (x *StatsResponse) GetNumSessionsExhausted() uint32 {
	if x != nil {
		return x.NumSessionsExhausted
	}
	return 0
}

type PolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client type from which to retrieve the active offering policy.
	PolicyType    PolicyType `protobuf:"varint,1,opt,name=policy_type,json=policyType,proto3,enum=wtclientrpc.PolicyType" json:"policy_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyRequest) Reset() {
	*x = PolicyRequest{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyRequest) ProtoMessage() {}

func (x *PolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyRequest.ProtoReflect.Descriptor instead.
func (*PolicyRequest) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{16}
}

func (x *PolicyRequest) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_LEGACY
}

type PolicyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of updates each session we negotiate with watchtowers
	// should allow.
	MaxUpdates uint32 `protobuf:"varint,1,opt,name=max_updates,json=maxUpdates,proto3" json:"max_updates,omitempty"`
	// Deprecated, use sweep_sat_per_vbyte.
	// The fee rate, in satoshis per vbyte, that will be used by watchtowers for
	// justice transactions in response to channel breaches.
	//
	// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
	SweepSatPerByte uint32 `protobuf:"varint,2,opt,name=sweep_sat_per_byte,json=sweepSatPerByte,proto3" json:"sweep_sat_per_byte,omitempty"`
	// The fee rate, in satoshis per vbyte, that will be used by watchtowers for
	// justice transactions in response to channel breaches.
	SweepSatPerVbyte uint32 `protobuf:"varint,3,opt,name=sweep_sat_per_vbyte,json=sweepSatPerVbyte,proto3" json:"sweep_sat_per_vbyte,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PolicyResponse) Reset() {
	*x = PolicyResponse{}
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyResponse) ProtoMessage() {}

func (x *PolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wtclientrpc_wtclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyResponse.ProtoReflect.Descriptor instead.
func (*PolicyResponse) Descriptor() ([]byte, []int) {
	return file_wtclientrpc_wtclient_proto_rawDescGZIP(), []int{17}
}

func (x *PolicyResponse) GetMaxUpdates() uint32 {
	if x != nil {
		return x.MaxUpdates
	}
	return 0
}

// Deprecated: Marked as deprecated in wtclientrpc/wtclient.proto.
func (x *PolicyResponse) GetSweepSatPerByte() uint32 {
	if x != nil {
		return x.SweepSatPerByte
	}
	return 0
}

func (x *PolicyResponse) GetSweepSatPerVbyte() uint32 {
	if x != nil {
		return x.SweepSatPerVbyte
	}
	return 0
}

var File_wtclientrpc_wtclient_proto protoreflect.FileDescriptor

const file_wtclientrpc_wtclient_proto_rawDesc = "" +
	"\n" +
	"\x1awtclientrpc/wtclient.proto\x12\vwtclientrpc\"C\n" +
	"\x0fAddTowerRequest\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"\x12\n" +
	"\x10AddTowerResponse\"F\n" +
	"\x12RemoveTowerRequest\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"\x15\n" +
	"\x13RemoveTowerResponse\"0\n" +
	"\x16DeactivateTowerRequest\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\"1\n" +
	"\x17DeactivateTowerResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\"8\n" +
	"\x17TerminateSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\fR\tsessionId\"2\n" +
	"\x18TerminateSessionResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\"\x96\x01\n" +
	"\x13GetTowerInfoRequest\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\x12)\n" +
	"\x10include_sessions\x18\x02 \x01(\bR\x0fincludeSessions\x12<\n" +
	"\x1aexclude_exhausted_sessions\x18\x03 \x01(\bR\x18excludeExhaustedSessions\"\xf0\x01\n" +
	"\fTowerSession\x12\x1f\n" +
	"\vnum_backups\x18\x01 \x01(\rR\n" +
	"numBackups\x12.\n" +
	"\x13num_pending_backups\x18\x02 \x01(\rR\x11numPendingBackups\x12\x1f\n" +
	"\vmax_backups\x18\x03 \x01(\rR\n" +
	"maxBackups\x12/\n" +
	"\x12sweep_sat_per_byte\x18\x04 \x01(\rB\x02\x18\x01R\x0fsweepSatPerByte\x12-\n" +
	"\x13sweep_sat_per_vbyte\x18\x05 \x01(\rR\x10sweepSatPerVbyte\x12\x0e\n" +
	"\x02id\x18\x06 \x01(\fR\x02id\"\x9f\x02\n" +
	"\x05Tower\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\x12\x1c\n" +
	"\taddresses\x18\x02 \x03(\tR\taddresses\x12<\n" +
	"\x18active_session_candidate\x18\x03 \x01(\bB\x02\x18\x01R\x16activeSessionCandidate\x12%\n" +
	"\fnum_sessions\x18\x04 \x01(\rB\x02\x18\x01R\vnumSessions\x129\n" +
	"\bsessions\x18\x05 \x03(\v2\x19.wtclientrpc.TowerSessionB\x02\x18\x01R\bsessions\x12@\n" +
	"\fsession_info\x18\x06 \x03(\v2\x1d.wtclientrpc.TowerSessionInfoR\vsessionInfo\"\xe0\x01\n" +
	"\x10TowerSessionInfo\x128\n" +
	"\x18active_session_candidate\x18\x01 \x01(\bR\x16activeSessionCandidate\x12!\n" +
	"\fnum_sessions\x18\x02 \x01(\rR\vnumSessions\x125\n" +
	"\bsessions\x18\x03 \x03(\v2\x19.wtclientrpc.TowerSessionR\bsessions\x128\n" +
	"\vpolicy_type\x18\x04 \x01(\x0e2\x17.wtclientrpc.PolicyTypeR\n" +
	"policyType\"|\n" +
	"\x11ListTowersRequest\x12)\n" +
	"\x10include_sessions\x18\x01 \x01(\bR\x0fincludeSessions\x12<\n" +
	"\x1aexclude_exhausted_sessions\x18\x02 \x01(\bR\x18excludeExhaustedSessions\"@\n" +
	"\x12ListTowersResponse\x12*\n" +
	"\x06towers\x18\x01 \x03(\v2\x12.wtclientrpc.TowerR\x06towers\"\x0e\n" +
	"\fStatsRequest\"\xf8\x01\n" +
	"\rStatsResponse\x12\x1f\n" +
	"\vnum_backups\x18\x01 \x01(\rR\n" +
	"numBackups\x12.\n" +
	"\x13num_pending_backups\x18\x02 \x01(\rR\x11numPendingBackups\x12,\n" +
	"\x12num_failed_backups\x18\x03 \x01(\rR\x10numFailedBackups\x122\n" +
	"\x15num_sessions_acquired\x18\x04 \x01(\rR\x13numSessionsAcquired\x124\n" +
	"\x16num_sessions_exhausted\x18\x05 \x01(\rR\x14numSessionsExhausted\"I\n" +
	"\rPolicyRequest\x128\n" +
	"\vpolicy_type\x18\x01 \x01(\x0e2\x17.wtclientrpc.PolicyTypeR\n" +
	"policyType\"\x91\x01\n" +
	"\x0ePolicyResponse\x12\x1f\n" +
	"\vmax_updates\x18\x01 \x01(\rR\n" +
	"maxUpdates\x12/\n" +
	"\x12sweep_sat_per_byte\x18\x02 \x01(\rB\x02\x18\x01R\x0fsweepSatPerByte\x12-\n" +
	"\x13sweep_sat_per_vbyte\x18\x03 \x01(\rR\x10sweepSatPerVbyte*1\n" +
	"\n" +
	"PolicyType\x12\n" +
	"\n" +
	"\x06LEGACY\x10\x00\x12\n" +
	"\n" +
	"\x06ANCHOR\x10\x01\x12\v\n" +
	"\aTAPROOT\x10\x022\x84\x05\n" +
	"\x10WatchtowerClient\x12G\n" +
	"\bAddTower\x12\x1c.wtclientrpc.AddTowerRequest\x1a\x1d.wtclientrpc.AddTowerResponse\x12P\n" +
	"\vRemoveTower\x12\x1f.wtclientrpc.RemoveTowerRequest\x1a .wtclientrpc.RemoveTowerResponse\x12\\\n" +
	"\x0fDeactivateTower\x12#.wtclientrpc.DeactivateTowerRequest\x1a$.wtclientrpc.DeactivateTowerResponse\x12_\n" +
	"\x10TerminateSession\x12$.wtclientrpc.TerminateSessionRequest\x1a%.wtclientrpc.TerminateSessionResponse\x12M\n" +
	"\n" +
	"ListTowers\x12\x1e.wtclientrpc.ListTowersRequest\x1a\x1f.wtclientrpc.ListTowersResponse\x12D\n" +
	"\fGetTowerInfo\x12 .wtclientrpc.GetTowerInfoRequest\x1a\x12.wtclientrpc.Tower\x12>\n" +
	"\x05Stats\x12\x19.wtclientrpc.StatsRequest\x1a\x1a.wtclientrpc.StatsResponse\x12A\n" +
	"\x06Policy\x12\x1a.wtclientrpc.PolicyRequest\x1a\x1b.wtclientrpc.PolicyResponseB3Z1github.com/lightningnetwork/lnd/lnrpc/wtclientrpcb\x06proto3"

var (
	file_wtclientrpc_wtclient_proto_rawDescOnce sync.Once
	file_wtclientrpc_wtclient_proto_rawDescData []byte
)

func file_wtclientrpc_wtclient_proto_rawDescGZIP() []byte {
	file_wtclientrpc_wtclient_proto_rawDescOnce.Do(func() {
		file_wtclientrpc_wtclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wtclientrpc_wtclient_proto_rawDesc), len(file_wtclientrpc_wtclient_proto_rawDesc)))
	})
	return file_wtclientrpc_wtclient_proto_rawDescData
}

var file_wtclientrpc_wtclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wtclientrpc_wtclient_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_wtclientrpc_wtclient_proto_goTypes = []any{
	(PolicyType)(0),                  // 0: wtclientrpc.PolicyType
	(*AddTowerRequest)(nil),          // 1: wtclientrpc.AddTowerRequest
	(*AddTowerResponse)(nil),         // 2: wtclientrpc.AddTowerResponse
	(*RemoveTowerRequest)(nil),       // 3: wtclientrpc.RemoveTowerRequest
	(*RemoveTowerResponse)(nil),      // 4: wtclientrpc.RemoveTowerResponse
	(*DeactivateTowerRequest)(nil),   // 5: wtclientrpc.DeactivateTowerRequest
	(*DeactivateTowerResponse)(nil),  // 6: wtclientrpc.DeactivateTowerResponse
	(*TerminateSessionRequest)(nil),  // 7: wtclientrpc.TerminateSessionRequest
	(*TerminateSessionResponse)(nil), // 8: wtclientrpc.TerminateSessionResponse
	(*GetTowerInfoRequest)(nil),      // 9: wtclientrpc.GetTowerInfoRequest
	(*TowerSession)(nil),             // 10: wtclientrpc.TowerSession
	(*Tower)(nil),                    // 11: wtclientrpc.Tower
	(*TowerSessionInfo)(nil),         // 12: wtclientrpc.TowerSessionInfo
	(*ListTowersRequest)(nil),        // 13: wtclientrpc.ListTowersRequest
	(*ListTowersResponse)(nil),       // 14: wtclientrpc.ListTowersResponse
	(*StatsRequest)(nil),             // 15: wtclientrpc.StatsRequest
	(*StatsResponse)(nil),            // 16: wtclientrpc.StatsResponse
	(*PolicyRequest)(nil),            // 17: wtclientrpc.PolicyRequest
	(*PolicyResponse)(nil),           // 18: wtclientrpc.PolicyResponse
}
var file_wtclientrpc_wtclient_proto_depIdxs = []int32{
	10, // 0: wtclientrpc.Tower.sessions:type_name -> wtclientrpc.TowerSession
	12, // 1: wtclientrpc.Tower.session_info:type_name -> wtclientrpc.TowerSessionInfo
	10, // 2: wtclientrpc.TowerSessionInfo.sessions:type_name -> wtclientrpc.TowerSession
	0,  // 3: wtclientrpc.TowerSessionInfo.policy_type:type_name -> wtclientrpc.PolicyType
	11, // 4: wtclientrpc.ListTowersResponse.towers:type_name -> wtclientrpc.Tower
	0,  // 5: wtclientrpc.PolicyRequest.policy_type:type_name -> wtclientrpc.PolicyType
	1,  // 6: wtclientrpc.WatchtowerClient.AddTower:input_type -> wtclientrpc.AddTowerRequest
	3,  // 7: wtclientrpc.WatchtowerClient.RemoveTower:input_type -> wtclientrpc.RemoveTowerRequest
	5,  // 8: wtclientrpc.WatchtowerClient.DeactivateTower:input_type -> wtclientrpc.DeactivateTowerRequest
	7,  // 9: wtclientrpc.WatchtowerClient.TerminateSession:input_type -> wtclientrpc.TerminateSessionRequest
	13, // 10: wtclientrpc.WatchtowerClient.ListTowers:input_type -> wtclientrpc.ListTowersRequest
	9,  // 11: wtclientrpc.WatchtowerClient.GetTowerInfo:input_type -> wtclientrpc.GetTowerInfoRequest
	15, // 12: wtclientrpc.WatchtowerClient.Stats:input_type -> wtclientrpc.StatsRequest
	17, // 13: wtclientrpc.WatchtowerClient.Policy:input_type -> wtclientrpc.PolicyRequest
	2,  // 14: wtclientrpc.WatchtowerClient.AddTower:output_type -> wtclientrpc.AddTowerResponse
	4,  // 15: wtclientrpc.WatchtowerClient.RemoveTower:output_type -> wtclientrpc.RemoveTowerResponse
	6,  // 16: wtclientrpc.WatchtowerClient.DeactivateTower:output_type -> wtclientrpc.DeactivateTowerResponse
	8,  // 17: wtclientrpc.WatchtowerClient.TerminateSession:output_type -> wtclientrpc.TerminateSessionResponse
	14, // 18: wtclientrpc.WatchtowerClient.ListTowers:output_type -> wtclientrpc.ListTowersResponse
	11, // 19: wtclientrpc.WatchtowerClient.GetTowerInfo:output_type -> wtclientrpc.Tower
	16, // 20: wtclientrpc.WatchtowerClient.Stats:output_type -> wtclientrpc.StatsResponse
	18, // 21: wtclientrpc.WatchtowerClient.Policy:output_type -> wtclientrpc.PolicyResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_wtclientrpc_wtclient_proto_init() }
func file_wtclientrpc_wtclient_proto_init() {
	if File_wtclientrpc_wtclient_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wtclientrpc_wtclient_proto_rawDesc), len(file_wtclientrpc_wtclient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wtclientrpc_wtclient_proto_goTypes,
		DependencyIndexes: file_wtclientrpc_wtclient_proto_depIdxs,
		EnumInfos:         file_wtclientrpc_wtclient_proto_enumTypes,
		MessageInfos:      file_wtclientrpc_wtclient_proto_msgTypes,
	}.Build()
	File_wtclientrpc_wtclient_proto = out.File
	file_wtclientrpc_wtclient_proto_goTypes = nil
	file_wtclientrpc_wtclient_proto_depIdxs = nil
}
