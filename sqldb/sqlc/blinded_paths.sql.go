// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: blinded_paths.sql

package sqlc

import (
	"context"
)

const fetchBlindedPathHops = `-- name: FetchBlindedPathHops :many
SELECT blinded_path_id, hop_index, channel_id, node_pub_key, amount_to_fwd
FROM blinded_path_hops
WHERE blinded_path_id = $1
ORDER BY hop_index
`

func (q *Queries) FetchBlindedPathHops(ctx context.Context, blindedPathID int64) ([]BlindedPathHop, error) {
	rows, err := q.db.QueryContext(ctx, fetchBlindedPathHops, blindedPathID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlindedPathHop
	for rows.Next() {
		var i BlindedPathHop
		if err := rows.Scan(
			&i.BlindedPathID,
			&i.HopIndex,
			&i.ChannelID,
			&i.NodePubKey,
			&i.AmountToFwd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchBlindedPaths = `-- name: FetchBlindedPaths :many
SELECT id, invoice_id, last_ephemeral_pub, session_key, introduction_node, amount_msat
FROM blinded_paths
WHERE invoice_id = $1
`

func (q *Queries) FetchBlindedPaths(ctx context.Context, invoiceID int64) ([]BlindedPath, error) {
	rows, err := q.db.QueryContext(ctx, fetchBlindedPaths, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlindedPath
	for rows.Next() {
		var i BlindedPath
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.LastEphemeralPub,
			&i.SessionKey,
			&i.IntroductionNode,
			&i.AmountMsat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBlindedPath = `-- name: InsertBlindedPath :one
INSERT INTO blinded_paths (
    invoice_id, last_ephemeral_pub, session_key, introduction_node,
    amount_msat
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id
`

type InsertBlindedPathParams struct {
	InvoiceID        int64
	LastEphemeralPub []byte
	SessionKey       []byte
	IntroductionNode []byte
	AmountMsat       int64
}

func (q *Queries) InsertBlindedPath(ctx context.Context, arg InsertBlindedPathParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertBlindedPath,
		arg.InvoiceID,
		arg.LastEphemeralPub,
		arg.SessionKey,
		arg.IntroductionNode,
		arg.AmountMsat,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertBlindedPathHop = `-- name: InsertBlindedPathHop :exec
INSERT INTO blinded_path_hops (
    blinded_path_id, hop_index, channel_id, node_pub_key,
    amount_to_fwd
) VALUES (
    $1, $2, $3, $4, $5
)
`

type InsertBlindedPathHopParams struct {
	BlindedPathID int64
	HopIndex      int64
	ChannelID     int64
	NodePubKey    []byte
	AmountToFwd   int64
}

func (q *Queries) InsertBlindedPathHop(ctx context.Context, arg InsertBlindedPathHopParams) error {
	_, err := q.db.ExecContext(ctx, insertBlindedPathHop,
		arg.BlindedPathID,
		arg.HopIndex,
		arg.ChannelID,
		arg.NodePubKey,
		arg.AmountToFwd,
	)
	return err
}
